
Master_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00002b92  00002c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080009e  0080009e  00002c64  2**0
                  ALLOC
  3 .stab         0000270c  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001402  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006772  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000068d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ab2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000acac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000af6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__vector_12>
      34:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 14 	call	0x2996	; 0x2996 <main>
      8a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e9       	ldi	r26, 0x96	; 150
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e9       	ldi	r24, 0x96	; 150
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e9       	ldi	r22, 0x96	; 150
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_Init>:
 *
 ***************************************************/
#include <Uart_Interface.h>

void UART_Init(u16 baudRate)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_Init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UART_UBRRH_REG = (u8)(baudRate>>8);
     cac:	e0 e4       	ldi	r30, 0x40	; 64
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	89 2f       	mov	r24, r25
     cb6:	99 27       	eor	r25, r25
     cb8:	80 83       	st	Z, r24
	UART_UBRRL_REG = (u8)baudRate;
     cba:	e9 e2       	ldi	r30, 0x29	; 41
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB_REG,RXEN_BIT_NO);  /* Enable Receiver*/
     cc2:	aa e2       	ldi	r26, 0x2A	; 42
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e2       	ldi	r30, 0x2A	; 42
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG,TXEN_BIT_NO);  /* Enable Transmitter */
     cd0:	aa e2       	ldi	r26, 0x2A	; 42
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ea e2       	ldi	r30, 0x2A	; 42
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 60       	ori	r24, 0x08	; 8
     cdc:	8c 93       	st	X, r24
	/* Set frame format: 8data, 1stop bit, Even Parity */
	UART_UCSRC_REG |= (1 << URSEL_BIT_NO)|UART_8_BIT_DATA;
     cde:	a0 e4       	ldi	r26, 0x40	; 64
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	86 68       	ori	r24, 0x86	; 134
     cea:	8c 93       	st	X, r24

	// Enable RXC and TXC interrupts
	UART_UCSRB_REG |= (UART_RXCIE_ENABLE) | (UART_TXCIE_ENABLE);
     cec:	aa e2       	ldi	r26, 0x2A	; 42
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e2       	ldi	r30, 0x2A	; 42
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 6c       	ori	r24, 0xC0	; 192
     cf8:	8c 93       	st	X, r24
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <UART_TransmitChr>:

void UART_TransmitChr(u8 data)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!(CHECK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
     d10:	eb e2       	ldi	r30, 0x2B	; 43
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	82 95       	swap	r24
     d18:	86 95       	lsr	r24
     d1a:	87 70       	andi	r24, 0x07	; 7
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	81 70       	andi	r24, 0x01	; 1
     d22:	90 70       	andi	r25, 0x00	; 0
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	a1 f3       	breq	.-24     	; 0xd10 <UART_TransmitChr+0xc>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
     d28:	ec e2       	ldi	r30, 0x2C	; 44
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	80 83       	st	Z, r24
}
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <UART_TransmitStr+0x6>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <UART_TransmitStr+0x24>
	/* Wait for empty transmit buffer */
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	80 81       	ld	r24, Z
     d4e:	0e 94 82 06 	call	0xd04	; 0xd04 <UART_TransmitChr>
		str++;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	89 f7       	brne	.-30     	; 0xd48 <UART_TransmitStr+0x10>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_ReceiveChr>:

u8 UART_ReceiveChr(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (!(CHECK_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
     d78:	eb e2       	ldi	r30, 0x2B	; 43
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 23       	and	r24, r24
     d80:	dc f7       	brge	.-10     	; 0xd78 <UART_ReceiveChr+0x8>
			;
	/* Get and return received data from buffer */
	return UART_UDR_REG;
     d82:	ec e2       	ldi	r30, 0x2C	; 44
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <Spi_MasterInit>:
 *  Description	:
 *
 *************************************************/
#include "Spi.h"
void Spi_MasterInit(void)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, OUTPUT);
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	65 e0       	ldi	r22, 0x05	; 5
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	configure SPI SS Pin as output	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, OUTPUT);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	64 e0       	ldi	r22, 0x04	; 4
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as output	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, OUTPUT);
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	67 e0       	ldi	r22, 0x07	; 7
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as input	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, INPUT);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	66 e0       	ldi	r22, 0x06	; 6
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_WriteChannel(SPI_SS_PORT, SPI_SS_CHANNEL, STD_LOW);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	64 e0       	ldi	r22, 0x04	; 4
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
//	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
//	/*	enable SPI Module in Master mode	*/
//	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
//	/*	set SCK frequency by F_CPU/16	*/
//	SPI_SPCR_REG|=SPI_SCK_FREQ_FCPU_DIV_16;
	SPI_SPCR_REG = 0x53;
     dc8:	ed e2       	ldi	r30, 0x2D	; 45
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	83 e5       	ldi	r24, 0x53	; 83
     dce:	80 83       	st	Z, r24
	SPI_SPSR_REG = 0x00;
     dd0:	ee e2       	ldi	r30, 0x2E	; 46
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	10 82       	st	Z, r1
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <Spi_SlaveInit>:

void Spi_SlaveInit(void)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, INPUT);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	65 e0       	ldi	r22, 0x05	; 5
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	configure SPI SS Pin as input	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, INPUT);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	64 e0       	ldi	r22, 0x04	; 4
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as input	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, INPUT);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as output	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, OUTPUT);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	66 e0       	ldi	r22, 0x06	; 6
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
//	/*	enable SPI Module	*/
//	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
//	/*	enable SPI Module in Slave mode	*/
//	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);

	SPI_SPCR_REG = 0x43;
     e0c:	ed e2       	ldi	r30, 0x2D	; 45
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	83 e4       	ldi	r24, 0x43	; 67
     e12:	80 83       	st	Z, r24
	SPI_SPSR_REG = 0x00;
     e14:	ee e2       	ldi	r30, 0x2E	; 46
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <Spi_MasterWrite+0x6>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
     e2c:	ef e2       	ldi	r30, 0x2F	; 47
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     e34:	ee e2       	ldi	r30, 0x2E	; 46
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	dc f7       	brge	.-10     	; 0xe34 <Spi_MasterWrite+0x14>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
     e3e:	ef e2       	ldi	r30, 0x2F	; 47
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	89 83       	std	Y+1, r24	; 0x01
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Spi_MasterRead>:
u8 Spi_MasterRead(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
     e5e:	ef e2       	ldi	r30, 0x2F	; 47
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     e66:	ee e2       	ldi	r30, 0x2E	; 46
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	dc f7       	brge	.-10     	; 0xe66 <Spi_MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
     e70:	ef e2       	ldi	r30, 0x2F	; 47
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
}
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <Spi_MasterTranseve>:

u8 Spi_MasterTranseve(u8 data)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
     e8a:	ef e2       	ldi	r30, 0x2F	; 47
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     e92:	ee e2       	ldi	r30, 0x2E	; 46
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	dc f7       	brge	.-10     	; 0xe92 <Spi_MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
     e9c:	ef e2       	ldi	r30, 0x2F	; 47
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <Spi_SlaveRead>:
u8 Spi_SlaveRead(void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     eb2:	ee e2       	ldi	r30, 0x2E	; 46
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 23       	and	r24, r24
     eba:	dc f7       	brge	.-10     	; 0xeb2 <Spi_SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
     ebc:	ef e2       	ldi	r30, 0x2F	; 47
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <Spi_SlaveWrite>:
void Spi_SlaveWrite(u8 data)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
     ed4:	ef e2       	ldi	r30, 0x2F	; 47
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	80 83       	st	Z, r24
}
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <EnableAllInterrupts>:
 *      Author: SRR&MO
 */

#include "GlblInterrupt_Interface.h"
void EnableAllInterrupts()
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(AVR_SREG_REG,I_BIT);
     eec:	af e5       	ldi	r26, 0x5F	; 95
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ef e5       	ldi	r30, 0x5F	; 95
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	8c 93       	st	X, r24
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <DisableAllInterrupts>:
void DisableAllInterrupts()
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(AVR_SREG_REG,I_BIT);
     f08:	af e5       	ldi	r26, 0x5F	; 95
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ef e5       	ldi	r30, 0x5F	; 95
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8f 77       	andi	r24, 0x7F	; 127
     f14:	8c 93       	st	X, r24
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <Dio_ConfigChannel>:
 */

#include "Dio_Interface.h"

void Dio_ConfigChannel(Dio_Port port,Dio_Channel channel, Dio_Direction direction)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <Dio_ConfigChannel+0x6>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <Dio_ConfigChannel+0x8>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	6a 83       	std	Y+2, r22	; 0x02
     f2e:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3d 83       	std	Y+5, r19	; 0x05
     f38:	2c 83       	std	Y+4, r18	; 0x04
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <Dio_ConfigChannel+0x2a>
     f44:	43 c0       	rjmp	.+134    	; 0xfcc <Dio_ConfigChannel+0xb0>
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	2c f4       	brge	.+10     	; 0xf5a <Dio_ConfigChannel+0x3e>
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	71 f0       	breq	.+28     	; 0xf74 <Dio_ConfigChannel+0x58>
     f58:	bc c0       	rjmp	.+376    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
     f5a:	2c 81       	ldd	r18, Y+4	; 0x04
     f5c:	3d 81       	ldd	r19, Y+5	; 0x05
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <Dio_ConfigChannel+0x4a>
     f64:	5f c0       	rjmp	.+190    	; 0x1024 <Dio_ConfigChannel+0x108>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <Dio_ConfigChannel+0x56>
     f70:	85 c0       	rjmp	.+266    	; 0x107c <Dio_ConfigChannel+0x160>
     f72:	af c0       	rjmp	.+350    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == INPUT)
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 23       	and	r24, r24
     f78:	a9 f4       	brne	.+42     	; 0xfa4 <Dio_ConfigChannel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,channel);
     f7a:	aa e3       	ldi	r26, 0x3A	; 58
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	ea e3       	ldi	r30, 0x3A	; 58
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <Dio_ConfigChannel+0x7c>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <Dio_ConfigChannel+0x78>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	97 c0       	rjmp	.+302    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,channel);
     fa4:	aa e3       	ldi	r26, 0x3A	; 58
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ea e3       	ldi	r30, 0x3A	; 58
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <Dio_ConfigChannel+0xa6>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <Dio_ConfigChannel+0xa2>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	83 c0       	rjmp	.+262    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (direction == INPUT)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 23       	and	r24, r24
     fd0:	a9 f4       	brne	.+42     	; 0xffc <Dio_ConfigChannel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,channel);
     fd2:	a7 e3       	ldi	r26, 0x37	; 55
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e3       	ldi	r30, 0x37	; 55
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <Dio_ConfigChannel+0xd4>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <Dio_ConfigChannel+0xd0>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	6b c0       	rjmp	.+214    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,channel);
     ffc:	a7 e3       	ldi	r26, 0x37	; 55
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e3       	ldi	r30, 0x37	; 55
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <Dio_ConfigChannel+0xfe>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <Dio_ConfigChannel+0xfa>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	57 c0       	rjmp	.+174    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (direction == INPUT)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 23       	and	r24, r24
    1028:	a9 f4       	brne	.+42     	; 0x1054 <Dio_ConfigChannel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,channel);
    102a:	a4 e3       	ldi	r26, 0x34	; 52
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e4 e3       	ldi	r30, 0x34	; 52
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <Dio_ConfigChannel+0x12c>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <Dio_ConfigChannel+0x128>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	3f c0       	rjmp	.+126    	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,channel);
    1054:	a4 e3       	ldi	r26, 0x34	; 52
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e4 e3       	ldi	r30, 0x34	; 52
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <Dio_ConfigChannel+0x156>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <Dio_ConfigChannel+0x152>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	2b c0       	rjmp	.+86     	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (direction == INPUT)
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 23       	and	r24, r24
    1080:	a9 f4       	brne	.+42     	; 0x10ac <Dio_ConfigChannel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,channel);
    1082:	a1 e3       	ldi	r26, 0x31	; 49
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e1 e3       	ldi	r30, 0x31	; 49
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <Dio_ConfigChannel+0x184>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <Dio_ConfigChannel+0x180>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	13 c0       	rjmp	.+38     	; 0x10d2 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,channel);
    10ac:	a1 e3       	ldi	r26, 0x31	; 49
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e1 e3       	ldi	r30, 0x31	; 49
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <Dio_ConfigChannel+0x1ae>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <Dio_ConfigChannel+0x1aa>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
		}
		break;
	}
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <Dio_WriteChannel>:
void Dio_WriteChannel(Dio_Port port,Dio_Channel channel, Dio_Level level)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <Dio_WriteChannel+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <Dio_WriteChannel+0x8>
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	6a 83       	std	Y+2, r22	; 0x02
    10f4:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3d 83       	std	Y+5, r19	; 0x05
    10fe:	2c 83       	std	Y+4, r18	; 0x04
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <Dio_WriteChannel+0x2a>
    110a:	43 c0       	rjmp	.+134    	; 0x1192 <Dio_WriteChannel+0xb0>
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	2c f4       	brge	.+10     	; 0x1120 <Dio_WriteChannel+0x3e>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	71 f0       	breq	.+28     	; 0x113a <Dio_WriteChannel+0x58>
    111e:	bc c0       	rjmp	.+376    	; 0x1298 <Dio_WriteChannel+0x1b6>
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <Dio_WriteChannel+0x4a>
    112a:	5f c0       	rjmp	.+190    	; 0x11ea <Dio_WriteChannel+0x108>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	09 f4       	brne	.+2      	; 0x1138 <Dio_WriteChannel+0x56>
    1136:	85 c0       	rjmp	.+266    	; 0x1242 <Dio_WriteChannel+0x160>
    1138:	af c0       	rjmp	.+350    	; 0x1298 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 23       	and	r24, r24
    113e:	a9 f4       	brne	.+42     	; 0x116a <Dio_WriteChannel+0x88>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <Dio_WriteChannel+0x7c>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <Dio_WriteChannel+0x78>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	97 c0       	rjmp	.+302    	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <Dio_WriteChannel+0xa6>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <Dio_WriteChannel+0xa2>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	83 c0       	rjmp	.+262    	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (level == STD_LOW)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	88 23       	and	r24, r24
    1196:	a9 f4       	brne	.+42     	; 0x11c2 <Dio_WriteChannel+0xe0>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
    1198:	a8 e3       	ldi	r26, 0x38	; 56
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <Dio_WriteChannel+0xd4>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <Dio_WriteChannel+0xd0>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	6b c0       	rjmp	.+214    	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
    11c2:	a8 e3       	ldi	r26, 0x38	; 56
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e3       	ldi	r30, 0x38	; 56
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <Dio_WriteChannel+0xfe>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <Dio_WriteChannel+0xfa>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	57 c0       	rjmp	.+174    	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (level == STD_LOW)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	a9 f4       	brne	.+42     	; 0x121a <Dio_WriteChannel+0x138>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
    11f0:	a5 e3       	ldi	r26, 0x35	; 53
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e3       	ldi	r30, 0x35	; 53
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <Dio_WriteChannel+0x12c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <Dio_WriteChannel+0x128>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
    121a:	a5 e3       	ldi	r26, 0x35	; 53
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e3       	ldi	r30, 0x35	; 53
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <Dio_WriteChannel+0x156>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <Dio_WriteChannel+0x152>
    123c:	84 2b       	or	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	2b c0       	rjmp	.+86     	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (level == STD_LOW)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 23       	and	r24, r24
    1246:	a9 f4       	brne	.+42     	; 0x1272 <Dio_WriteChannel+0x190>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
    1248:	a2 e3       	ldi	r26, 0x32	; 50
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e2 e3       	ldi	r30, 0x32	; 50
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <Dio_WriteChannel+0x184>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <Dio_WriteChannel+0x180>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <Dio_WriteChannel+0x1ae>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <Dio_WriteChannel+0x1aa>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
		}
		break;
	}
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <Dio_FlipChannel>:
void Dio_FlipChannel(Dio_Port port,Dio_Channel channel)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <Dio_FlipChannel+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <Dio_FlipChannel+0x8>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3c 83       	std	Y+4, r19	; 0x04
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	49 f1       	breq	.+82     	; 0x131e <Dio_FlipChannel+0x76>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <Dio_FlipChannel+0x38>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <Dio_FlipChannel+0x4e>
    12de:	5a c0       	rjmp	.+180    	; 0x1394 <Dio_FlipChannel+0xec>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	71 f1       	breq	.+92     	; 0x1346 <Dio_FlipChannel+0x9e>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	e9 f1       	breq	.+122    	; 0x136e <Dio_FlipChannel+0xc6>
    12f4:	4f c0       	rjmp	.+158    	; 0x1394 <Dio_FlipChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,channel);
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <Dio_FlipChannel+0x6c>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <Dio_FlipChannel+0x68>
    1318:	84 27       	eor	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	3b c0       	rjmp	.+118    	; 0x1394 <Dio_FlipChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,channel);
    131e:	a8 e3       	ldi	r26, 0x38	; 56
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e8 e3       	ldi	r30, 0x38	; 56
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <Dio_FlipChannel+0x94>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <Dio_FlipChannel+0x90>
    1340:	84 27       	eor	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	27 c0       	rjmp	.+78     	; 0x1394 <Dio_FlipChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,channel);
    1346:	a5 e3       	ldi	r26, 0x35	; 53
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e3       	ldi	r30, 0x35	; 53
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <Dio_FlipChannel+0xbc>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <Dio_FlipChannel+0xb8>
    1368:	84 27       	eor	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	13 c0       	rjmp	.+38     	; 0x1394 <Dio_FlipChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,channel);
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <Dio_FlipChannel+0xe4>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <Dio_FlipChannel+0xe0>
    1390:	84 27       	eor	r24, r20
    1392:	8c 93       	st	X, r24
		break;
	}
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <Dio_ReadChannel>:
Dio_Level Dio_ReadChannel(Dio_Port port,Dio_Channel channel)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <Dio_ReadChannel+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <Dio_ReadChannel+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	8a 83       	std	Y+2, r24	; 0x02
    13b2:	6b 83       	std	Y+3, r22	; 0x03
	Dio_Level ret_level;
	switch (port)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	4c 81       	ldd	r20, Y+4	; 0x04
    13c0:	5d 81       	ldd	r21, Y+5	; 0x05
    13c2:	41 30       	cpi	r20, 0x01	; 1
    13c4:	51 05       	cpc	r21, r1
    13c6:	41 f1       	breq	.+80     	; 0x1418 <Dio_ReadChannel+0x76>
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9d 81       	ldd	r25, Y+5	; 0x05
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	91 05       	cpc	r25, r1
    13d0:	34 f4       	brge	.+12     	; 0x13de <Dio_ReadChannel+0x3c>
    13d2:	2c 81       	ldd	r18, Y+4	; 0x04
    13d4:	3d 81       	ldd	r19, Y+5	; 0x05
    13d6:	21 15       	cp	r18, r1
    13d8:	31 05       	cpc	r19, r1
    13da:	61 f0       	breq	.+24     	; 0x13f4 <Dio_ReadChannel+0x52>
    13dc:	52 c0       	rjmp	.+164    	; 0x1482 <Dio_ReadChannel+0xe0>
    13de:	4c 81       	ldd	r20, Y+4	; 0x04
    13e0:	5d 81       	ldd	r21, Y+5	; 0x05
    13e2:	42 30       	cpi	r20, 0x02	; 2
    13e4:	51 05       	cpc	r21, r1
    13e6:	51 f1       	breq	.+84     	; 0x143c <Dio_ReadChannel+0x9a>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	b9 f1       	breq	.+110    	; 0x1460 <Dio_ReadChannel+0xbe>
    13f2:	47 c0       	rjmp	.+142    	; 0x1482 <Dio_ReadChannel+0xe0>
	{
	case DIO_PORTA:
		ret_level = CHECK_BIT(DIO_PINA_REG,channel);
    13f4:	e9 e3       	ldi	r30, 0x39	; 57
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <Dio_ReadChannel+0x6a>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <Dio_ReadChannel+0x66>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	35 c0       	rjmp	.+106    	; 0x1482 <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTB:
		ret_level = CHECK_BIT(DIO_PINB_REG,channel);
    1418:	e6 e3       	ldi	r30, 0x36	; 54
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a9 01       	movw	r20, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <Dio_ReadChannel+0x8e>
    142c:	55 95       	asr	r21
    142e:	47 95       	ror	r20
    1430:	8a 95       	dec	r24
    1432:	e2 f7       	brpl	.-8      	; 0x142c <Dio_ReadChannel+0x8a>
    1434:	ca 01       	movw	r24, r20
    1436:	81 70       	andi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	23 c0       	rjmp	.+70     	; 0x1482 <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTC:
		ret_level = CHECK_BIT(DIO_PINC_REG,channel);
    143c:	e3 e3       	ldi	r30, 0x33	; 51
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <Dio_ReadChannel+0xb2>
    1450:	55 95       	asr	r21
    1452:	47 95       	ror	r20
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <Dio_ReadChannel+0xae>
    1458:	ca 01       	movw	r24, r20
    145a:	81 70       	andi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	11 c0       	rjmp	.+34     	; 0x1482 <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTD:
		ret_level = CHECK_BIT(DIO_PIND_REG,channel);
    1460:	e0 e3       	ldi	r30, 0x30	; 48
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <Dio_ReadChannel+0xd6>
    1474:	55 95       	asr	r21
    1476:	47 95       	ror	r20
    1478:	8a 95       	dec	r24
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <Dio_ReadChannel+0xd2>
    147c:	ca 01       	movw	r24, r20
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_level;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <Dio_WriteChannels>:
void Dio_WriteChannels(Dio_Port port,u8 value,u8 mask)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <Dio_WriteChannels+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <Dio_WriteChannels+0x8>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6a 83       	std	Y+2, r22	; 0x02
    14a6:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3d 83       	std	Y+5, r19	; 0x05
    14b0:	2c 83       	std	Y+4, r18	; 0x04
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	29 f1       	breq	.+74     	; 0x1506 <Dio_WriteChannels+0x72>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <Dio_WriteChannels+0x3c>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <Dio_WriteChannels+0x52>
    14ce:	4a c0       	rjmp	.+148    	; 0x1564 <Dio_WriteChannels+0xd0>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	31 f1       	breq	.+76     	; 0x1526 <Dio_WriteChannels+0x92>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	89 f1       	breq	.+98     	; 0x1546 <Dio_WriteChannels+0xb2>
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <Dio_WriteChannels+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG= (DIO_PORTA_REG & ~mask)|(value & mask);
    14e6:	ab e3       	ldi	r26, 0x3B	; 59
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	98 2f       	mov	r25, r24
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	80 95       	com	r24
    14f6:	29 2f       	mov	r18, r25
    14f8:	28 23       	and	r18, r24
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	89 23       	and	r24, r25
    1500:	82 2b       	or	r24, r18
    1502:	8c 93       	st	X, r24
    1504:	2f c0       	rjmp	.+94     	; 0x1564 <Dio_WriteChannels+0xd0>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG= (DIO_PORTB_REG & ~mask)|(value & mask);
    1506:	a8 e3       	ldi	r26, 0x38	; 56
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e8 e3       	ldi	r30, 0x38	; 56
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	98 2f       	mov	r25, r24
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	80 95       	com	r24
    1516:	29 2f       	mov	r18, r25
    1518:	28 23       	and	r18, r24
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	89 23       	and	r24, r25
    1520:	82 2b       	or	r24, r18
    1522:	8c 93       	st	X, r24
    1524:	1f c0       	rjmp	.+62     	; 0x1564 <Dio_WriteChannels+0xd0>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG= (DIO_PORTC_REG & ~mask)|(value & mask);
    1526:	a5 e3       	ldi	r26, 0x35	; 53
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e3       	ldi	r30, 0x35	; 53
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	98 2f       	mov	r25, r24
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	80 95       	com	r24
    1536:	29 2f       	mov	r18, r25
    1538:	28 23       	and	r18, r24
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	89 23       	and	r24, r25
    1540:	82 2b       	or	r24, r18
    1542:	8c 93       	st	X, r24
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <Dio_WriteChannels+0xd0>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG= (DIO_PORTD_REG & ~mask)|(value & mask);
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	98 2f       	mov	r25, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	80 95       	com	r24
    1556:	29 2f       	mov	r18, r25
    1558:	28 23       	and	r18, r24
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	89 23       	and	r24, r25
    1560:	82 2b       	or	r24, r18
    1562:	8c 93       	st	X, r24
		break;
	}
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <Dio_ConfigChannels>:
void Dio_ConfigChannels(Dio_Port port,u8 mask,Dio_Direction direction)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <Dio_ConfigChannels+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <Dio_ConfigChannels+0x8>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	6a 83       	std	Y+2, r22	; 0x02
    1586:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3d 83       	std	Y+5, r19	; 0x05
    1590:	2c 83       	std	Y+4, r18	; 0x04
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	9d 81       	ldd	r25, Y+5	; 0x05
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	69 f1       	breq	.+90     	; 0x15f6 <Dio_ConfigChannels+0x82>
    159c:	2c 81       	ldd	r18, Y+4	; 0x04
    159e:	3d 81       	ldd	r19, Y+5	; 0x05
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <Dio_ConfigChannels+0x3c>
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	9d 81       	ldd	r25, Y+5	; 0x05
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <Dio_ConfigChannels+0x54>
    15ae:	67 c0       	rjmp	.+206    	; 0x167e <Dio_ConfigChannels+0x10a>
    15b0:	2c 81       	ldd	r18, Y+4	; 0x04
    15b2:	3d 81       	ldd	r19, Y+5	; 0x05
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	a9 f1       	breq	.+106    	; 0x1624 <Dio_ConfigChannels+0xb0>
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <Dio_ConfigChannels+0x52>
    15c4:	46 c0       	rjmp	.+140    	; 0x1652 <Dio_ConfigChannels+0xde>
    15c6:	5b c0       	rjmp	.+182    	; 0x167e <Dio_ConfigChannels+0x10a>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	88 23       	and	r24, r24
    15cc:	59 f4       	brne	.+22     	; 0x15e4 <Dio_ConfigChannels+0x70>
		{
			DIO_DDRA_REG= (DIO_DDRA_REG & ~mask);
    15ce:	aa e3       	ldi	r26, 0x3A	; 58
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ea e3       	ldi	r30, 0x3A	; 58
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	98 2f       	mov	r25, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 95       	com	r24
    15de:	89 23       	and	r24, r25
    15e0:	8c 93       	st	X, r24
    15e2:	4d c0       	rjmp	.+154    	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRA_REG |= mask;
    15e4:	aa e3       	ldi	r26, 0x3A	; 58
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ea e3       	ldi	r30, 0x3A	; 58
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	90 81       	ld	r25, Z
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	89 2b       	or	r24, r25
    15f2:	8c 93       	st	X, r24
    15f4:	44 c0       	rjmp	.+136    	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		break;
	case DIO_PORTB:
		if (direction == INPUT)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 23       	and	r24, r24
    15fa:	59 f4       	brne	.+22     	; 0x1612 <Dio_ConfigChannels+0x9e>
		{
			DIO_DDRB_REG= (DIO_DDRB_REG & ~mask);
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	98 2f       	mov	r25, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 95       	com	r24
    160c:	89 23       	and	r24, r25
    160e:	8c 93       	st	X, r24
    1610:	36 c0       	rjmp	.+108    	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRB_REG |= mask;
    1612:	a7 e3       	ldi	r26, 0x37	; 55
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e7 e3       	ldi	r30, 0x37	; 55
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
    1622:	2d c0       	rjmp	.+90     	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		break;
	case DIO_PORTC:
		if (direction == INPUT)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	88 23       	and	r24, r24
    1628:	59 f4       	brne	.+22     	; 0x1640 <Dio_ConfigChannels+0xcc>
		{
			DIO_DDRC_REG= (DIO_DDRC_REG & ~mask);
    162a:	a4 e3       	ldi	r26, 0x34	; 52
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e4 e3       	ldi	r30, 0x34	; 52
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	98 2f       	mov	r25, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 95       	com	r24
    163a:	89 23       	and	r24, r25
    163c:	8c 93       	st	X, r24
    163e:	1f c0       	rjmp	.+62     	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRC_REG |= mask;
    1640:	a4 e3       	ldi	r26, 0x34	; 52
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e4 e3       	ldi	r30, 0x34	; 52
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	90 81       	ld	r25, Z
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	89 2b       	or	r24, r25
    164e:	8c 93       	st	X, r24
    1650:	16 c0       	rjmp	.+44     	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		break;
	case DIO_PORTD:
		if (direction == INPUT)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	88 23       	and	r24, r24
    1656:	59 f4       	brne	.+22     	; 0x166e <Dio_ConfigChannels+0xfa>
		{
			DIO_DDRD_REG= (DIO_DDRD_REG & ~mask);
    1658:	a1 e3       	ldi	r26, 0x31	; 49
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e1 e3       	ldi	r30, 0x31	; 49
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	98 2f       	mov	r25, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 95       	com	r24
    1668:	89 23       	and	r24, r25
    166a:	8c 93       	st	X, r24
    166c:	08 c0       	rjmp	.+16     	; 0x167e <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRD_REG |= mask;
    166e:	a1 e3       	ldi	r26, 0x31	; 49
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e1 e3       	ldi	r30, 0x31	; 49
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	90 81       	ld	r25, Z
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	89 2b       	or	r24, r25
    167c:	8c 93       	st	X, r24
		}
		break;
	}
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <Relay_Init>:
 *
 *      Author: SRR&MO
 */
#include "Relay_Interface.h"
void Relay_Init(void)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(RELAY_PORT,RELAY_CHANNEL,OUTPUT);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	62 e0       	ldi	r22, 0x02	; 2
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <Relay_TurnON>:
void Relay_TurnON(void)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(RELAY_PORT,RELAY_CHANNEL,STD_HIGH);
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	62 e0       	ldi	r22, 0x02	; 2
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <Relay_TurnOFF>:
void Relay_TurnOFF(void)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(RELAY_PORT,RELAY_CHANNEL,STD_LOW);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
}
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <Relay_Toggle>:
void Relay_Toggle(void)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(RELAY_PORT,RELAY_CHANNEL);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_FlipChannel>
}
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <Led_Init>:
 **********************************/

#include "Led_Interface.h"

void Led_Init(void)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT, LED0_CHANNEL, OUTPUT);
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	62 e0       	ldi	r22, 0x02	; 2
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT, LED1_CHANNEL, OUTPUT);
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	67 e0       	ldi	r22, 0x07	; 7
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT, LED2_CHANNEL, OUTPUT);
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	63 e0       	ldi	r22, 0x03	; 3
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <Led_ON>:
void Led_ON(Led_ID led)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <Led_ON+0x6>
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3b 83       	std	Y+3, r19	; 0x03
    172e:	2a 83       	std	Y+2, r18	; 0x02
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	79 f0       	breq	.+30     	; 0x1758 <Led_ON+0x40>
    173a:	2a 81       	ldd	r18, Y+2	; 0x02
    173c:	3b 81       	ldd	r19, Y+3	; 0x03
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	81 f0       	breq	.+32     	; 0x1764 <Led_ON+0x4c>
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	9b 81       	ldd	r25, Y+3	; 0x03
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	89 f4       	brne	.+34     	; 0x176e <Led_ON+0x56>
	{
	case LED0:
#if (LED0_CONNECTION == FORWARD)
		Dio_WriteChannel(LED0_PORT,LED0_CHANNEL,STD_HIGH);
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
    1756:	0b c0       	rjmp	.+22     	; 0x176e <Led_ON+0x56>
		Dio_WriteChannel(LED0_PORT,LED0_CHANNEL,STD_LOW);
#endif
		break;
	case LED1:
#if (LED1_CONNECTION == FORWARD)
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_HIGH);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	67 e0       	ldi	r22, 0x07	; 7
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
    1762:	05 c0       	rjmp	.+10     	; 0x176e <Led_ON+0x56>
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_LOW);
#endif
		break;
	case LED2:
#if (LED2_CONNECTION == FORWARD)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_HIGH);
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	63 e0       	ldi	r22, 0x03	; 3
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
#elif (LED2_CONNECTION == REVERSE)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_LOW);
#endif
		break;
	}
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <Led_OFF>:
void Led_OFF(Led_ID led)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <Led_OFF+0x6>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3b 83       	std	Y+3, r19	; 0x03
    1790:	2a 83       	std	Y+2, r18	; 0x02
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	79 f0       	breq	.+30     	; 0x17ba <Led_OFF+0x40>
    179c:	2a 81       	ldd	r18, Y+2	; 0x02
    179e:	3b 81       	ldd	r19, Y+3	; 0x03
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <Led_OFF+0x4c>
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	89 f4       	brne	.+34     	; 0x17d0 <Led_OFF+0x56>
	{
	case LED0:
#if (LED0_CONNECTION == FORWARD)
		Dio_WriteChannel(LED0_PORT,LED0_CHANNEL,STD_LOW);
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
    17b8:	0b c0       	rjmp	.+22     	; 0x17d0 <Led_OFF+0x56>
#endif

		break;
	case LED1:
#if (LED1_CONNECTION == FORWARD)
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_LOW);
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	67 e0       	ldi	r22, 0x07	; 7
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <Led_OFF+0x56>
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_HIGH);
#endif
		break;
	case LED2:
#if (LED2_CONNECTION == FORWARD)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_LOW);
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	63 e0       	ldi	r22, 0x03	; 3
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
#elif (LED2_CONNECTION == REVERSE)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_HIGH);
#endif
		break;
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <Led_Toggle>:
void Led_Toggle(Led_ID led)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <Led_Toggle+0x6>
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3b 83       	std	Y+3, r19	; 0x03
    17f2:	2a 83       	std	Y+2, r18	; 0x02
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	71 f0       	breq	.+28     	; 0x181a <Led_Toggle+0x3e>
    17fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1800:	3b 81       	ldd	r19, Y+3	; 0x03
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	71 f0       	breq	.+28     	; 0x1824 <Led_Toggle+0x48>
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	71 f4       	brne	.+28     	; 0x182c <Led_Toggle+0x50>
	{
	case LED0:
		Dio_FlipChannel(LED0_PORT,LED0_CHANNEL);
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	62 e0       	ldi	r22, 0x02	; 2
    1814:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_FlipChannel>
    1818:	09 c0       	rjmp	.+18     	; 0x182c <Led_Toggle+0x50>
		break;
	case LED1:
		Dio_FlipChannel(LED1_PORT,LED1_CHANNEL);
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	67 e0       	ldi	r22, 0x07	; 7
    181e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_FlipChannel>
    1822:	04 c0       	rjmp	.+8      	; 0x182c <Led_Toggle+0x50>
		break;
	case LED2:
		Dio_FlipChannel(LED2_PORT,LED2_CHANNEL);
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_FlipChannel>
		break;
	}
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <Lcd_Cmd>:
#include "Std_Types.h"



volatile void Lcd_Cmd(u8 cmd)
{
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	cd 54       	subi	r28, 0x4D	; 77
    1846:	d0 40       	sbci	r29, 0x00	; 0
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	fe 01       	movw	r30, r28
    1854:	e3 5b       	subi	r30, 0xB3	; 179
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 83       	st	Z, r24
	(*(volatile u8 *)(command+2)) &= ~(1<<Rs) ;         //Reset Rs pin for Write command
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8d 7f       	andi	r24, 0xFD	; 253
    1866:	8c 93       	st	X, r24


	(*(volatile u8 *)(data+2))     = cmd &0xf0 ;       //send the command high nibble to D4:D7
    1868:	ab e3       	ldi	r26, 0x3B	; 59
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	fe 01       	movw	r30, r28
    186e:	e3 5b       	subi	r30, 0xB3	; 179
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	80 7f       	andi	r24, 0xF0	; 240
    1876:	8c 93       	st	X, r24

	(*(volatile u8 *)(command+2)) |= (1<<E) ;          //Set Enable start of high to low pulse to latch data
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 60       	ori	r24, 0x08	; 8
    1884:	8c 93       	st	X, r24
    1886:	fe 01       	movw	r30, r28
    1888:	e7 5b       	subi	r30, 0xB7	; 183
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e8       	ldi	r26, 0x80	; 128
    1892:	bf e3       	ldi	r27, 0x3F	; 63
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	8e 01       	movw	r16, r28
    189e:	0b 5b       	subi	r16, 0xBB	; 187
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	fe 01       	movw	r30, r28
    18a4:	e7 5b       	subi	r30, 0xB7	; 183
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	55 e4       	ldi	r21, 0x45	; 69
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	f8 01       	movw	r30, r16
    18c2:	80 83       	st	Z, r24
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	a2 83       	std	Z+2, r26	; 0x02
    18c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ca:	fe 01       	movw	r30, r28
    18cc:	eb 5b       	subi	r30, 0xBB	; 187
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	44 f4       	brge	.+16     	; 0x18f8 <Lcd_Cmd+0xc0>
		__ticks = 1;
    18e8:	fe 01       	movw	r30, r28
    18ea:	ed 5b       	subi	r30, 0xBD	; 189
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	64 c0       	rjmp	.+200    	; 0x19c0 <Lcd_Cmd+0x188>
	else if (__tmp > 65535)
    18f8:	fe 01       	movw	r30, r28
    18fa:	eb 5b       	subi	r30, 0xBB	; 187
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	3f ef       	ldi	r19, 0xFF	; 255
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	57 e4       	ldi	r21, 0x47	; 71
    190e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1912:	18 16       	cp	r1, r24
    1914:	0c f0       	brlt	.+2      	; 0x1918 <Lcd_Cmd+0xe0>
    1916:	43 c0       	rjmp	.+134    	; 0x199e <Lcd_Cmd+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	fe 01       	movw	r30, r28
    191a:	e7 5b       	subi	r30, 0xB7	; 183
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8e 01       	movw	r16, r28
    1938:	0d 5b       	subi	r16, 0xBD	; 189
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	f8 01       	movw	r30, r16
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
    194e:	1f c0       	rjmp	.+62     	; 0x198e <Lcd_Cmd+0x156>
    1950:	fe 01       	movw	r30, r28
    1952:	ef 5b       	subi	r30, 0xBF	; 191
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 e9       	ldi	r24, 0x90	; 144
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195e:	fe 01       	movw	r30, r28
    1960:	ef 5b       	subi	r30, 0xBF	; 191
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <Lcd_Cmd+0x130>
    196c:	fe 01       	movw	r30, r28
    196e:	ef 5b       	subi	r30, 0xBF	; 191
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	de 01       	movw	r26, r28
    1978:	ad 5b       	subi	r26, 0xBD	; 189
    197a:	bf 4f       	sbci	r27, 0xFF	; 255
    197c:	fe 01       	movw	r30, r28
    197e:	ed 5b       	subi	r30, 0xBD	; 189
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	11 96       	adiw	r26, 0x01	; 1
    198a:	9c 93       	st	X, r25
    198c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198e:	fe 01       	movw	r30, r28
    1990:	ed 5b       	subi	r30, 0xBD	; 189
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	91 81       	ldd	r25, Z+1	; 0x01
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	d1 f6       	brne	.-76     	; 0x1950 <Lcd_Cmd+0x118>
    199c:	24 c0       	rjmp	.+72     	; 0x19e6 <Lcd_Cmd+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	8e 01       	movw	r16, r28
    19a0:	0d 5b       	subi	r16, 0xBD	; 189
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	fe 01       	movw	r30, r28
    19a6:	eb 5b       	subi	r30, 0xBB	; 187
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	fe 01       	movw	r30, r28
    19c2:	ed 5b       	subi	r30, 0xBD	; 189
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	fe 01       	movw	r30, r28
    19cc:	ff 96       	adiw	r30, 0x3f	; 63
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	fe 01       	movw	r30, r28
    19d4:	ff 96       	adiw	r30, 0x3f	; 63
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <Lcd_Cmd+0x1a2>
    19de:	fe 01       	movw	r30, r28
    19e0:	ff 96       	adiw	r30, 0x3f	; 63
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
	_delay_ms(1);
	(*(volatile u8 *)(command+2)) &= ~(1<<E) ;         //Reset Enable pin of the high to low pulse
    19e6:	a8 e3       	ldi	r26, 0x38	; 56
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e8 e3       	ldi	r30, 0x38	; 56
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	87 7f       	andi	r24, 0xF7	; 247
    19f2:	8c 93       	st	X, r24
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a8 ec       	ldi	r26, 0xC8	; 200
    19fa:	b2 e4       	ldi	r27, 0x42	; 66
    19fc:	8b af       	std	Y+59, r24	; 0x3b
    19fe:	9c af       	std	Y+60, r25	; 0x3c
    1a00:	ad af       	std	Y+61, r26	; 0x3d
    1a02:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a04:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a06:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0c:	2b ea       	ldi	r18, 0xAB	; 171
    1a0e:	3a ea       	ldi	r19, 0xAA	; 170
    1a10:	4a ea       	ldi	r20, 0xAA	; 170
    1a12:	50 e4       	ldi	r21, 0x40	; 64
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8f ab       	std	Y+55, r24	; 0x37
    1a1e:	98 af       	std	Y+56, r25	; 0x38
    1a20:	a9 af       	std	Y+57, r26	; 0x39
    1a22:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a24:	6f a9       	ldd	r22, Y+55	; 0x37
    1a26:	78 ad       	ldd	r23, Y+56	; 0x38
    1a28:	89 ad       	ldd	r24, Y+57	; 0x39
    1a2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	1c f4       	brge	.+6      	; 0x1a42 <Lcd_Cmd+0x20a>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	8e ab       	std	Y+54, r24	; 0x36
    1a40:	91 c0       	rjmp	.+290    	; 0x1b64 <Lcd_Cmd+0x32c>
	else if (__tmp > 255)
    1a42:	6f a9       	ldd	r22, Y+55	; 0x37
    1a44:	78 ad       	ldd	r23, Y+56	; 0x38
    1a46:	89 ad       	ldd	r24, Y+57	; 0x39
    1a48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	53 e4       	ldi	r21, 0x43	; 67
    1a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	0c f0       	brlt	.+2      	; 0x1a5c <Lcd_Cmd+0x224>
    1a5a:	7b c0       	rjmp	.+246    	; 0x1b52 <Lcd_Cmd+0x31a>
	{
		_delay_ms(__us / 1000.0);
    1a5c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a5e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a e7       	ldi	r20, 0x7A	; 122
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8a ab       	std	Y+50, r24	; 0x32
    1a76:	9b ab       	std	Y+51, r25	; 0x33
    1a78:	ac ab       	std	Y+52, r26	; 0x34
    1a7a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6a a9       	ldd	r22, Y+50	; 0x32
    1a7e:	7b a9       	ldd	r23, Y+51	; 0x33
    1a80:	8c a9       	ldd	r24, Y+52	; 0x34
    1a82:	9d a9       	ldd	r25, Y+53	; 0x35
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8e a7       	std	Y+46, r24	; 0x2e
    1a96:	9f a7       	std	Y+47, r25	; 0x2f
    1a98:	a8 ab       	std	Y+48, r26	; 0x30
    1a9a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a9c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a9e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aa0:	88 a9       	ldd	r24, Y+48	; 0x30
    1aa2:	99 a9       	ldd	r25, Y+49	; 0x31
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <Lcd_Cmd+0x286>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9d a7       	std	Y+45, r25	; 0x2d
    1aba:	8c a7       	std	Y+44, r24	; 0x2c
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <Lcd_Cmd+0x304>
	else if (__tmp > 65535)
    1abe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ac0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ac2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ac4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <Lcd_Cmd+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6a a9       	ldd	r22, Y+50	; 0x32
    1ad8:	7b a9       	ldd	r23, Y+51	; 0x33
    1ada:	8c a9       	ldd	r24, Y+52	; 0x34
    1adc:	9d a9       	ldd	r25, Y+53	; 0x35
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9d a7       	std	Y+45, r25	; 0x2d
    1afc:	8c a7       	std	Y+44, r24	; 0x2c
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <Lcd_Cmd+0x2e6>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9b a7       	std	Y+43, r25	; 0x2b
    1b06:	8a a7       	std	Y+42, r24	; 0x2a
    1b08:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <Lcd_Cmd+0x2d4>
    1b10:	9b a7       	std	Y+43, r25	; 0x2b
    1b12:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b16:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9d a7       	std	Y+45, r25	; 0x2d
    1b1c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b20:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <Lcd_Cmd+0x2c8>
    1b26:	24 c0       	rjmp	.+72     	; 0x1b70 <Lcd_Cmd+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b2a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b2c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b2e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9d a7       	std	Y+45, r25	; 0x2d
    1b3a:	8c a7       	std	Y+44, r24	; 0x2c
    1b3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b40:	99 a7       	std	Y+41, r25	; 0x29
    1b42:	88 a7       	std	Y+40, r24	; 0x28
    1b44:	88 a5       	ldd	r24, Y+40	; 0x28
    1b46:	99 a5       	ldd	r25, Y+41	; 0x29
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <Lcd_Cmd+0x310>
    1b4c:	99 a7       	std	Y+41, r25	; 0x29
    1b4e:	88 a7       	std	Y+40, r24	; 0x28
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <Lcd_Cmd+0x338>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b52:	6f a9       	ldd	r22, Y+55	; 0x37
    1b54:	78 ad       	ldd	r23, Y+56	; 0x38
    1b56:	89 ad       	ldd	r24, Y+57	; 0x39
    1b58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8e ab       	std	Y+54, r24	; 0x36
    1b64:	8e a9       	ldd	r24, Y+54	; 0x36
    1b66:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b68:	8f a1       	ldd	r24, Y+39	; 0x27
    1b6a:	8a 95       	dec	r24
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Lcd_Cmd+0x332>
    1b6e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	(*(volatile u8 *)(data+2))=cmd<<4 ;                //send the Low nibble to D4:D7
    1b70:	ab e3       	ldi	r26, 0x3B	; 59
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	fe 01       	movw	r30, r28
    1b76:	e3 5b       	subi	r30, 0xB3	; 179
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 95       	swap	r24
    1b7e:	80 7f       	andi	r24, 0xF0	; 240
    1b80:	8c 93       	st	X, r24

	(*(volatile u8 *)(command+2)) |= (1<<E) ;          //Set Enable start of high to low pulse to latch data
    1b82:	a8 e3       	ldi	r26, 0x38	; 56
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e8 e3       	ldi	r30, 0x38	; 56
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	88 60       	ori	r24, 0x08	; 8
    1b8e:	8c 93       	st	X, r24
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8b a3       	std	Y+35, r24	; 0x23
    1b9a:	9c a3       	std	Y+36, r25	; 0x24
    1b9c:	ad a3       	std	Y+37, r26	; 0x25
    1b9e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	55 e4       	ldi	r21, 0x45	; 69
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bba:	98 a3       	std	Y+32, r25	; 0x20
    1bbc:	a9 a3       	std	Y+33, r26	; 0x21
    1bbe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bc0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bc2:	78 a1       	ldd	r23, Y+32	; 0x20
    1bc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <Lcd_Cmd+0x3aa>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <Lcd_Cmd+0x428>
	else if (__tmp > 65535)
    1be2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1be4:	78 a1       	ldd	r23, Y+32	; 0x20
    1be6:	89 a1       	ldd	r24, Y+33	; 0x21
    1be8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <Lcd_Cmd+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c20:	8d 8f       	std	Y+29, r24	; 0x1d
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <Lcd_Cmd+0x40a>
    1c24:	80 e9       	ldi	r24, 0x90	; 144
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	9c 8f       	std	Y+28, r25	; 0x1c
    1c2a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <Lcd_Cmd+0x3f8>
    1c34:	9c 8f       	std	Y+28, r25	; 0x1c
    1c36:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c40:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <Lcd_Cmd+0x3ec>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <Lcd_Cmd+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c4e:	78 a1       	ldd	r23, Y+32	; 0x20
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c64:	9a 8f       	std	Y+26, r25	; 0x1a
    1c66:	89 8f       	std	Y+25, r24	; 0x19
    1c68:	89 8d       	ldd	r24, Y+25	; 0x19
    1c6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <Lcd_Cmd+0x434>
    1c70:	9a 8f       	std	Y+26, r25	; 0x1a
    1c72:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);
	(*(volatile u8 *)(command+2)) &= ~(1<<E) ;
    1c74:	a8 e3       	ldi	r26, 0x38	; 56
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e8 e3       	ldi	r30, 0x38	; 56
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	87 7f       	andi	r24, 0xF7	; 247
    1c80:	8c 93       	st	X, r24
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a8 ec       	ldi	r26, 0xC8	; 200
    1c88:	b2 e4       	ldi	r27, 0x42	; 66
    1c8a:	8d 8b       	std	Y+21, r24	; 0x15
    1c8c:	9e 8b       	std	Y+22, r25	; 0x16
    1c8e:	af 8b       	std	Y+23, r26	; 0x17
    1c90:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	2b ea       	ldi	r18, 0xAB	; 171
    1c9c:	3a ea       	ldi	r19, 0xAA	; 170
    1c9e:	4a ea       	ldi	r20, 0xAA	; 170
    1ca0:	50 e4       	ldi	r21, 0x40	; 64
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	89 8b       	std	Y+17, r24	; 0x11
    1cac:	9a 8b       	std	Y+18, r25	; 0x12
    1cae:	ab 8b       	std	Y+19, r26	; 0x13
    1cb0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1cb2:	69 89       	ldd	r22, Y+17	; 0x11
    1cb4:	7a 89       	ldd	r23, Y+18	; 0x12
    1cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	1c f4       	brge	.+6      	; 0x1cd0 <Lcd_Cmd+0x498>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	88 8b       	std	Y+16, r24	; 0x10
    1cce:	91 c0       	rjmp	.+290    	; 0x1df2 <Lcd_Cmd+0x5ba>
	else if (__tmp > 255)
    1cd0:	69 89       	ldd	r22, Y+17	; 0x11
    1cd2:	7a 89       	ldd	r23, Y+18	; 0x12
    1cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	0c f0       	brlt	.+2      	; 0x1cea <Lcd_Cmd+0x4b2>
    1ce8:	7b c0       	rjmp	.+246    	; 0x1de0 <Lcd_Cmd+0x5a8>
	{
		_delay_ms(__us / 1000.0);
    1cea:	6d 89       	ldd	r22, Y+21	; 0x15
    1cec:	7e 89       	ldd	r23, Y+22	; 0x16
    1cee:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8c 87       	std	Y+12, r24	; 0x0c
    1d04:	9d 87       	std	Y+13, r25	; 0x0d
    1d06:	ae 87       	std	Y+14, r26	; 0x0e
    1d08:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	55 e4       	ldi	r21, 0x45	; 69
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	88 87       	std	Y+8, r24	; 0x08
    1d24:	99 87       	std	Y+9, r25	; 0x09
    1d26:	aa 87       	std	Y+10, r26	; 0x0a
    1d28:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d2a:	68 85       	ldd	r22, Y+8	; 0x08
    1d2c:	79 85       	ldd	r23, Y+9	; 0x09
    1d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <Lcd_Cmd+0x514>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9f 83       	std	Y+7, r25	; 0x07
    1d48:	8e 83       	std	Y+6, r24	; 0x06
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <Lcd_Cmd+0x592>
	else if (__tmp > 65535)
    1d4c:	68 85       	ldd	r22, Y+8	; 0x08
    1d4e:	79 85       	ldd	r23, Y+9	; 0x09
    1d50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <Lcd_Cmd+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9f 83       	std	Y+7, r25	; 0x07
    1d8a:	8e 83       	std	Y+6, r24	; 0x06
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <Lcd_Cmd+0x574>
    1d8e:	80 e9       	ldi	r24, 0x90	; 144
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	9d 83       	std	Y+5, r25	; 0x05
    1d94:	8c 83       	std	Y+4, r24	; 0x04
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <Lcd_Cmd+0x562>
    1d9e:	9d 83       	std	Y+5, r25	; 0x05
    1da0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8e 81       	ldd	r24, Y+6	; 0x06
    1da4:	9f 81       	ldd	r25, Y+7	; 0x07
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9f 83       	std	Y+7, r25	; 0x07
    1daa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8e 81       	ldd	r24, Y+6	; 0x06
    1dae:	9f 81       	ldd	r25, Y+7	; 0x07
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <Lcd_Cmd+0x556>
    1db4:	24 c0       	rjmp	.+72     	; 0x1dfe <Lcd_Cmd+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	68 85       	ldd	r22, Y+8	; 0x08
    1db8:	79 85       	ldd	r23, Y+9	; 0x09
    1dba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9f 83       	std	Y+7, r25	; 0x07
    1dc8:	8e 83       	std	Y+6, r24	; 0x06
    1dca:	8e 81       	ldd	r24, Y+6	; 0x06
    1dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dce:	9b 83       	std	Y+3, r25	; 0x03
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <Lcd_Cmd+0x59e>
    1dda:	9b 83       	std	Y+3, r25	; 0x03
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <Lcd_Cmd+0x5c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1de0:	69 89       	ldd	r22, Y+17	; 0x11
    1de2:	7a 89       	ldd	r23, Y+18	; 0x12
    1de4:	8b 89       	ldd	r24, Y+19	; 0x13
    1de6:	9c 89       	ldd	r25, Y+20	; 0x14
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	88 8b       	std	Y+16, r24	; 0x10
    1df2:	88 89       	ldd	r24, Y+16	; 0x10
    1df4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	8a 95       	dec	r24
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <Lcd_Cmd+0x5c0>
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    1dfe:	c3 5b       	subi	r28, 0xB3	; 179
    1e00:	df 4f       	sbci	r29, 0xFF	; 255
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <Lcd_Init>:

volatile void Lcd_Init()
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	68 97       	sbiw	r28, 0x18	; 24
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
	(*(volatile u8 *)(data+1))=0XFF;                     // Set the data port as O/P
    1e2a:	ea e3       	ldi	r30, 0x3A	; 58
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	80 83       	st	Z, r24

	(*(volatile u8 *)(command +1))=0XFF;                 // Set the command port as O/P
    1e32:	e7 e3       	ldi	r30, 0x37	; 55
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	80 83       	st	Z, r24

	(*(volatile u8 *)(data+2))=0X00;                     // Initialize data port
    1e3a:	eb e3       	ldi	r30, 0x3B	; 59
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	10 82       	st	Z, r1

	(*(volatile u8 *)(command+2))&= ~(1<<E);            //Reset Enable pin
    1e40:	a8 e3       	ldi	r26, 0x38	; 56
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e8 e3       	ldi	r30, 0x38	; 56
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	87 7f       	andi	r24, 0xF7	; 247
    1e4c:	8c 93       	st	X, r24


	Lcd_Cmd(0x33);                 // Set 8-bit mode
    1e4e:	83 e3       	ldi	r24, 0x33	; 51
    1e50:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
	Lcd_Cmd(0x32);                 // Set 8-bit mode again (as indicated in the LCD data sheet)
    1e54:	82 e3       	ldi	r24, 0x32	; 50
    1e56:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
	Lcd_Cmd(0x28);                 // 4-bit mode operation
    1e5a:	88 e2       	ldi	r24, 0x28	; 40
    1e5c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
	Lcd_Cmd(0x0e);                 // Cursor Underline
    1e60:	8e e0       	ldi	r24, 0x0E	; 14
    1e62:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
	Lcd_Cmd(0x01);                 // Clear screen
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	aa ef       	ldi	r26, 0xFA	; 250
    1e72:	b4 e4       	ldi	r27, 0x44	; 68
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	2b ea       	ldi	r18, 0xAB	; 171
    1e86:	3a ea       	ldi	r19, 0xAA	; 170
    1e88:	4a ea       	ldi	r20, 0xAA	; 170
    1e8a:	50 e4       	ldi	r21, 0x40	; 64
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	89 8b       	std	Y+17, r24	; 0x11
    1e96:	9a 8b       	std	Y+18, r25	; 0x12
    1e98:	ab 8b       	std	Y+19, r26	; 0x13
    1e9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e9c:	69 89       	ldd	r22, Y+17	; 0x11
    1e9e:	7a 89       	ldd	r23, Y+18	; 0x12
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	1c f4       	brge	.+6      	; 0x1eba <Lcd_Init+0xa4>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	88 8b       	std	Y+16, r24	; 0x10
    1eb8:	91 c0       	rjmp	.+290    	; 0x1fdc <Lcd_Init+0x1c6>
	else if (__tmp > 255)
    1eba:	69 89       	ldd	r22, Y+17	; 0x11
    1ebc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	53 e4       	ldi	r21, 0x43	; 67
    1eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	0c f0       	brlt	.+2      	; 0x1ed4 <Lcd_Init+0xbe>
    1ed2:	7b c0       	rjmp	.+246    	; 0x1fca <Lcd_Init+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a e7       	ldi	r20, 0x7A	; 122
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8c 87       	std	Y+12, r24	; 0x0c
    1eee:	9d 87       	std	Y+13, r25	; 0x0d
    1ef0:	ae 87       	std	Y+14, r26	; 0x0e
    1ef2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ef6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ef8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a e7       	ldi	r20, 0x7A	; 122
    1f02:	55 e4       	ldi	r21, 0x45	; 69
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	88 87       	std	Y+8, r24	; 0x08
    1f0e:	99 87       	std	Y+9, r25	; 0x09
    1f10:	aa 87       	std	Y+10, r26	; 0x0a
    1f12:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f14:	68 85       	ldd	r22, Y+8	; 0x08
    1f16:	79 85       	ldd	r23, Y+9	; 0x09
    1f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <Lcd_Init+0x120>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9f 83       	std	Y+7, r25	; 0x07
    1f32:	8e 83       	std	Y+6, r24	; 0x06
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <Lcd_Init+0x19e>
	else if (__tmp > 65535)
    1f36:	68 85       	ldd	r22, Y+8	; 0x08
    1f38:	79 85       	ldd	r23, Y+9	; 0x09
    1f3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <Lcd_Init+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f50:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9f 83       	std	Y+7, r25	; 0x07
    1f74:	8e 83       	std	Y+6, r24	; 0x06
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <Lcd_Init+0x180>
    1f78:	80 e9       	ldi	r24, 0x90	; 144
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9d 83       	std	Y+5, r25	; 0x05
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <Lcd_Init+0x16e>
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9f 83       	std	Y+7, r25	; 0x07
    1f94:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <Lcd_Init+0x162>
    1f9e:	24 c0       	rjmp	.+72     	; 0x1fe8 <Lcd_Init+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	68 85       	ldd	r22, Y+8	; 0x08
    1fa2:	79 85       	ldd	r23, Y+9	; 0x09
    1fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9f 83       	std	Y+7, r25	; 0x07
    1fb2:	8e 83       	std	Y+6, r24	; 0x06
    1fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb8:	9b 83       	std	Y+3, r25	; 0x03
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <Lcd_Init+0x1aa>
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	0f c0       	rjmp	.+30     	; 0x1fe8 <Lcd_Init+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fca:	69 89       	ldd	r22, Y+17	; 0x11
    1fcc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	88 8b       	std	Y+16, r24	; 0x10
    1fdc:	88 89       	ldd	r24, Y+16	; 0x10
    1fde:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	8a 95       	dec	r24
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <Lcd_Init+0x1cc>
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	Lcd_Cmd(0x06);                 //Cursor Increment
    1fe8:	86 e0       	ldi	r24, 0x06	; 6
    1fea:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
}
    1fee:	68 96       	adiw	r28, 0x18	; 24
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <Lcd_DisplayChr>:


volatile void Lcd_DisplayChr(u8 chr)
{
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	c1 56       	subi	r28, 0x61	; 97
    200e:	d0 40       	sbci	r29, 0x00	; 0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	fe 01       	movw	r30, r28
    201c:	ef 59       	subi	r30, 0x9F	; 159
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 83       	st	Z, r24
	(*(volatile u8 *)(command+2)) |=(1<<Rs) ;          // Set Rs pin for Data write
    2022:	a8 e3       	ldi	r26, 0x38	; 56
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e8 e3       	ldi	r30, 0x38	; 56
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	82 60       	ori	r24, 0x02	; 2
    202e:	8c 93       	st	X, r24
	(*(volatile u8 *)(data+2))=chr&0xf0 ;
    2030:	ab e3       	ldi	r26, 0x3B	; 59
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	fe 01       	movw	r30, r28
    2036:	ef 59       	subi	r30, 0x9F	; 159
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	80 7f       	andi	r24, 0xF0	; 240
    203e:	8c 93       	st	X, r24
	(*(volatile u8 *)(command+2)) |=(1<<Rs) ;         // Set Rs pin for Data write
    2040:	a8 e3       	ldi	r26, 0x38	; 56
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e8 e3       	ldi	r30, 0x38	; 56
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	82 60       	ori	r24, 0x02	; 2
    204c:	8c 93       	st	X, r24
	(*(volatile u8 *)(command+2))|=(1<<E) ;           // Set Enable start of high to low pulse to latch data
    204e:	a8 e3       	ldi	r26, 0x38	; 56
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e8 e3       	ldi	r30, 0x38	; 56
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	88 60       	ori	r24, 0x08	; 8
    205a:	8c 93       	st	X, r24
    205c:	fe 01       	movw	r30, r28
    205e:	e3 5a       	subi	r30, 0xA3	; 163
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e8       	ldi	r26, 0x80	; 128
    2068:	bf e3       	ldi	r27, 0x3F	; 63
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2072:	8e 01       	movw	r16, r28
    2074:	07 5a       	subi	r16, 0xA7	; 167
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e3 5a       	subi	r30, 0xA3	; 163
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	2b ea       	ldi	r18, 0xAB	; 171
    2088:	3a ea       	ldi	r19, 0xAA	; 170
    208a:	4a ea       	ldi	r20, 0xAA	; 170
    208c:	50 e4       	ldi	r21, 0x40	; 64
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	f8 01       	movw	r30, r16
    2098:	80 83       	st	Z, r24
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	a2 83       	std	Z+2, r26	; 0x02
    209e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a0:	fe 01       	movw	r30, r28
    20a2:	e7 5a       	subi	r30, 0xA7	; 167
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	34 f4       	brge	.+12     	; 0x20ca <Lcd_DisplayChr+0xca>
		__ticks = 1;
    20be:	fe 01       	movw	r30, r28
    20c0:	e8 5a       	subi	r30, 0xA8	; 168
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	80 83       	st	Z, r24
    20c8:	e0 c0       	rjmp	.+448    	; 0x228a <Lcd_DisplayChr+0x28a>
	else if (__tmp > 255)
    20ca:	fe 01       	movw	r30, r28
    20cc:	e7 5a       	subi	r30, 0xA7	; 167
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	53 e4       	ldi	r21, 0x43	; 67
    20e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	0c f0       	brlt	.+2      	; 0x20ea <Lcd_DisplayChr+0xea>
    20e8:	c0 c0       	rjmp	.+384    	; 0x226a <Lcd_DisplayChr+0x26a>
	{
		_delay_ms(__us / 1000.0);
    20ea:	fe 01       	movw	r30, r28
    20ec:	e3 5a       	subi	r30, 0xA3	; 163
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	54 e4       	ldi	r21, 0x44	; 68
    2100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	fe 01       	movw	r30, r28
    210a:	ec 5a       	subi	r30, 0xAC	; 172
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 83       	st	Z, r24
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	a2 83       	std	Z+2, r26	; 0x02
    2114:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	8e 01       	movw	r16, r28
    2118:	00 5b       	subi	r16, 0xB0	; 176
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	ec 5a       	subi	r30, 0xAC	; 172
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	f8 01       	movw	r30, r16
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	a2 83       	std	Z+2, r26	; 0x02
    2142:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2144:	fe 01       	movw	r30, r28
    2146:	e0 5b       	subi	r30, 0xB0	; 176
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	44 f4       	brge	.+16     	; 0x2172 <Lcd_DisplayChr+0x172>
		__ticks = 1;
    2162:	fe 01       	movw	r30, r28
    2164:	e2 5b       	subi	r30, 0xB2	; 178
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
    2170:	64 c0       	rjmp	.+200    	; 0x223a <Lcd_DisplayChr+0x23a>
	else if (__tmp > 65535)
    2172:	fe 01       	movw	r30, r28
    2174:	e0 5b       	subi	r30, 0xB0	; 176
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	0c f0       	brlt	.+2      	; 0x2192 <Lcd_DisplayChr+0x192>
    2190:	43 c0       	rjmp	.+134    	; 0x2218 <Lcd_DisplayChr+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	fe 01       	movw	r30, r28
    2194:	ec 5a       	subi	r30, 0xAC	; 172
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8e 01       	movw	r16, r28
    21b2:	02 5b       	subi	r16, 0xB2	; 178
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	f8 01       	movw	r30, r16
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
    21c8:	1f c0       	rjmp	.+62     	; 0x2208 <Lcd_DisplayChr+0x208>
    21ca:	fe 01       	movw	r30, r28
    21cc:	e4 5b       	subi	r30, 0xB4	; 180
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 e9       	ldi	r24, 0x90	; 144
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21d8:	fe 01       	movw	r30, r28
    21da:	e4 5b       	subi	r30, 0xB4	; 180
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <Lcd_DisplayChr+0x1e2>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e4 5b       	subi	r30, 0xB4	; 180
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	de 01       	movw	r26, r28
    21f2:	a2 5b       	subi	r26, 0xB2	; 178
    21f4:	bf 4f       	sbci	r27, 0xFF	; 255
    21f6:	fe 01       	movw	r30, r28
    21f8:	e2 5b       	subi	r30, 0xB2	; 178
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	9c 93       	st	X, r25
    2206:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	fe 01       	movw	r30, r28
    220a:	e2 5b       	subi	r30, 0xB2	; 178
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	d1 f6       	brne	.-76     	; 0x21ca <Lcd_DisplayChr+0x1ca>
    2216:	4b c0       	rjmp	.+150    	; 0x22ae <Lcd_DisplayChr+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	8e 01       	movw	r16, r28
    221a:	02 5b       	subi	r16, 0xB2	; 178
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	e0 5b       	subi	r30, 0xB0	; 176
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    223a:	de 01       	movw	r26, r28
    223c:	a6 5b       	subi	r26, 0xB6	; 182
    223e:	bf 4f       	sbci	r27, 0xFF	; 255
    2240:	fe 01       	movw	r30, r28
    2242:	e2 5b       	subi	r30, 0xB2	; 178
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	9c 93       	st	X, r25
    224e:	8e 93       	st	-X, r24
    2250:	fe 01       	movw	r30, r28
    2252:	e6 5b       	subi	r30, 0xB6	; 182
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <Lcd_DisplayChr+0x25a>
    225e:	fe 01       	movw	r30, r28
    2260:	e6 5b       	subi	r30, 0xB6	; 182
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	22 c0       	rjmp	.+68     	; 0x22ae <Lcd_DisplayChr+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    226a:	8e 01       	movw	r16, r28
    226c:	08 5a       	subi	r16, 0xA8	; 168
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	fe 01       	movw	r30, r28
    2272:	e7 5a       	subi	r30, 0xA7	; 167
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	93 81       	ldd	r25, Z+3	; 0x03
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	f8 01       	movw	r30, r16
    2288:	80 83       	st	Z, r24
    228a:	de 01       	movw	r26, r28
    228c:	a7 5b       	subi	r26, 0xB7	; 183
    228e:	bf 4f       	sbci	r27, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	e8 5a       	subi	r30, 0xA8	; 168
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    229a:	fe 01       	movw	r30, r28
    229c:	e7 5b       	subi	r30, 0xB7	; 183
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	8a 95       	dec	r24
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <Lcd_DisplayChr+0x2a2>
    22a6:	fe 01       	movw	r30, r28
    22a8:	e7 5b       	subi	r30, 0xB7	; 183
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 83       	st	Z, r24
	_delay_us(1);
	(*(volatile u8 *)(command+2))&=~(1<<E) ;         //  Reset Enable End of the high to low pulse
    22ae:	a8 e3       	ldi	r26, 0x38	; 56
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e8 e3       	ldi	r30, 0x38	; 56
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	87 7f       	andi	r24, 0xF7	; 247
    22ba:	8c 93       	st	X, r24
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 5b       	subi	r30, 0xBB	; 187
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a8 ec       	ldi	r26, 0xC8	; 200
    22c8:	b2 e4       	ldi	r27, 0x42	; 66
    22ca:	80 83       	st	Z, r24
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	a2 83       	std	Z+2, r26	; 0x02
    22d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22d2:	8e 01       	movw	r16, r28
    22d4:	0f 5b       	subi	r16, 0xBF	; 191
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	fe 01       	movw	r30, r28
    22da:	eb 5b       	subi	r30, 0xBB	; 187
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	2b ea       	ldi	r18, 0xAB	; 171
    22e8:	3a ea       	ldi	r19, 0xAA	; 170
    22ea:	4a ea       	ldi	r20, 0xAA	; 170
    22ec:	50 e4       	ldi	r21, 0x40	; 64
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 83       	st	Z, r24
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	a2 83       	std	Z+2, r26	; 0x02
    22fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2300:	fe 01       	movw	r30, r28
    2302:	ef 5b       	subi	r30, 0xBF	; 191
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	34 f4       	brge	.+12     	; 0x232a <Lcd_DisplayChr+0x32a>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	fe 01       	movw	r30, r28
    2322:	e0 5c       	subi	r30, 0xC0	; 192
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 83       	st	Z, r24
    2328:	9d c0       	rjmp	.+314    	; 0x2464 <Lcd_DisplayChr+0x464>
	else if (__tmp > 255)
    232a:	fe 01       	movw	r30, r28
    232c:	ef 5b       	subi	r30, 0xBF	; 191
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	53 e4       	ldi	r21, 0x43	; 67
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	0c f0       	brlt	.+2      	; 0x234a <Lcd_DisplayChr+0x34a>
    2348:	7e c0       	rjmp	.+252    	; 0x2446 <Lcd_DisplayChr+0x446>
	{
		_delay_ms(__us / 1000.0);
    234a:	fe 01       	movw	r30, r28
    234c:	eb 5b       	subi	r30, 0xBB	; 187
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a e7       	ldi	r20, 0x7A	; 122
    235e:	54 e4       	ldi	r21, 0x44	; 68
    2360:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8c af       	std	Y+60, r24	; 0x3c
    236a:	9d af       	std	Y+61, r25	; 0x3d
    236c:	ae af       	std	Y+62, r26	; 0x3e
    236e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6c ad       	ldd	r22, Y+60	; 0x3c
    2372:	7d ad       	ldd	r23, Y+61	; 0x3d
    2374:	8e ad       	ldd	r24, Y+62	; 0x3e
    2376:	9f ad       	ldd	r25, Y+63	; 0x3f
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	55 e4       	ldi	r21, 0x45	; 69
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	88 af       	std	Y+56, r24	; 0x38
    238a:	99 af       	std	Y+57, r25	; 0x39
    238c:	aa af       	std	Y+58, r26	; 0x3a
    238e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2390:	68 ad       	ldd	r22, Y+56	; 0x38
    2392:	79 ad       	ldd	r23, Y+57	; 0x39
    2394:	8a ad       	ldd	r24, Y+58	; 0x3a
    2396:	9b ad       	ldd	r25, Y+59	; 0x3b
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <Lcd_DisplayChr+0x3b2>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9f ab       	std	Y+55, r25	; 0x37
    23ae:	8e ab       	std	Y+54, r24	; 0x36
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <Lcd_DisplayChr+0x430>
	else if (__tmp > 65535)
    23b2:	68 ad       	ldd	r22, Y+56	; 0x38
    23b4:	79 ad       	ldd	r23, Y+57	; 0x39
    23b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    23b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <Lcd_DisplayChr+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    23cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    23ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    23d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9f ab       	std	Y+55, r25	; 0x37
    23f0:	8e ab       	std	Y+54, r24	; 0x36
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <Lcd_DisplayChr+0x412>
    23f4:	80 e9       	ldi	r24, 0x90	; 144
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	9d ab       	std	Y+53, r25	; 0x35
    23fa:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23fc:	8c a9       	ldd	r24, Y+52	; 0x34
    23fe:	9d a9       	ldd	r25, Y+53	; 0x35
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <Lcd_DisplayChr+0x400>
    2404:	9d ab       	std	Y+53, r25	; 0x35
    2406:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8e a9       	ldd	r24, Y+54	; 0x36
    240a:	9f a9       	ldd	r25, Y+55	; 0x37
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9f ab       	std	Y+55, r25	; 0x37
    2410:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8e a9       	ldd	r24, Y+54	; 0x36
    2414:	9f a9       	ldd	r25, Y+55	; 0x37
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <Lcd_DisplayChr+0x3f4>
    241a:	2d c0       	rjmp	.+90     	; 0x2476 <Lcd_DisplayChr+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	68 ad       	ldd	r22, Y+56	; 0x38
    241e:	79 ad       	ldd	r23, Y+57	; 0x39
    2420:	8a ad       	ldd	r24, Y+58	; 0x3a
    2422:	9b ad       	ldd	r25, Y+59	; 0x3b
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9f ab       	std	Y+55, r25	; 0x37
    242e:	8e ab       	std	Y+54, r24	; 0x36
    2430:	8e a9       	ldd	r24, Y+54	; 0x36
    2432:	9f a9       	ldd	r25, Y+55	; 0x37
    2434:	9b ab       	std	Y+51, r25	; 0x33
    2436:	8a ab       	std	Y+50, r24	; 0x32
    2438:	8a a9       	ldd	r24, Y+50	; 0x32
    243a:	9b a9       	ldd	r25, Y+51	; 0x33
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <Lcd_DisplayChr+0x43c>
    2440:	9b ab       	std	Y+51, r25	; 0x33
    2442:	8a ab       	std	Y+50, r24	; 0x32
    2444:	18 c0       	rjmp	.+48     	; 0x2476 <Lcd_DisplayChr+0x476>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2446:	fe 01       	movw	r30, r28
    2448:	ef 5b       	subi	r30, 0xBF	; 191
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	60 81       	ld	r22, Z
    244e:	71 81       	ldd	r23, Z+1	; 0x01
    2450:	82 81       	ldd	r24, Z+2	; 0x02
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	fe 01       	movw	r30, r28
    245e:	e0 5c       	subi	r30, 0xC0	; 192
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 83       	st	Z, r24
    2464:	fe 01       	movw	r30, r28
    2466:	e0 5c       	subi	r30, 0xC0	; 192
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    246e:	89 a9       	ldd	r24, Y+49	; 0x31
    2470:	8a 95       	dec	r24
    2472:	f1 f7       	brne	.-4      	; 0x2470 <Lcd_DisplayChr+0x470>
    2474:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	(*(volatile u8 *)(data+2))=chr<<4 ;
    2476:	ab e3       	ldi	r26, 0x3B	; 59
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	fe 01       	movw	r30, r28
    247c:	ef 59       	subi	r30, 0x9F	; 159
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	82 95       	swap	r24
    2484:	80 7f       	andi	r24, 0xF0	; 240
    2486:	8c 93       	st	X, r24


	(*(volatile u8 *)(command+2))|=(1<<E) ;          //Set Enable start of high to low pulse to latch data
    2488:	a8 e3       	ldi	r26, 0x38	; 56
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e8 e3       	ldi	r30, 0x38	; 56
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	88 60       	ori	r24, 0x08	; 8
    2494:	8c 93       	st	X, r24
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	8d a7       	std	Y+45, r24	; 0x2d
    24a0:	9e a7       	std	Y+46, r25	; 0x2e
    24a2:	af a7       	std	Y+47, r26	; 0x2f
    24a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    24a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    24aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ac:	98 a9       	ldd	r25, Y+48	; 0x30
    24ae:	2b ea       	ldi	r18, 0xAB	; 171
    24b0:	3a ea       	ldi	r19, 0xAA	; 170
    24b2:	4a ea       	ldi	r20, 0xAA	; 170
    24b4:	50 e4       	ldi	r21, 0x40	; 64
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	89 a7       	std	Y+41, r24	; 0x29
    24c0:	9a a7       	std	Y+42, r25	; 0x2a
    24c2:	ab a7       	std	Y+43, r26	; 0x2b
    24c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    24c6:	69 a5       	ldd	r22, Y+41	; 0x29
    24c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    24ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    24cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	1c f4       	brge	.+6      	; 0x24e4 <Lcd_DisplayChr+0x4e4>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	88 a7       	std	Y+40, r24	; 0x28
    24e2:	91 c0       	rjmp	.+290    	; 0x2606 <Lcd_DisplayChr+0x606>
	else if (__tmp > 255)
    24e4:	69 a5       	ldd	r22, Y+41	; 0x29
    24e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    24e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	53 e4       	ldi	r21, 0x43	; 67
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	0c f0       	brlt	.+2      	; 0x24fe <Lcd_DisplayChr+0x4fe>
    24fc:	7b c0       	rjmp	.+246    	; 0x25f4 <Lcd_DisplayChr+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    24fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2500:	7e a5       	ldd	r23, Y+46	; 0x2e
    2502:	8f a5       	ldd	r24, Y+47	; 0x2f
    2504:	98 a9       	ldd	r25, Y+48	; 0x30
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a e7       	ldi	r20, 0x7A	; 122
    250c:	54 e4       	ldi	r21, 0x44	; 68
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	8c a3       	std	Y+36, r24	; 0x24
    2518:	9d a3       	std	Y+37, r25	; 0x25
    251a:	ae a3       	std	Y+38, r26	; 0x26
    251c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6c a1       	ldd	r22, Y+36	; 0x24
    2520:	7d a1       	ldd	r23, Y+37	; 0x25
    2522:	8e a1       	ldd	r24, Y+38	; 0x26
    2524:	9f a1       	ldd	r25, Y+39	; 0x27
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a e7       	ldi	r20, 0x7A	; 122
    252c:	55 e4       	ldi	r21, 0x45	; 69
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	88 a3       	std	Y+32, r24	; 0x20
    2538:	99 a3       	std	Y+33, r25	; 0x21
    253a:	aa a3       	std	Y+34, r26	; 0x22
    253c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    253e:	68 a1       	ldd	r22, Y+32	; 0x20
    2540:	79 a1       	ldd	r23, Y+33	; 0x21
    2542:	8a a1       	ldd	r24, Y+34	; 0x22
    2544:	9b a1       	ldd	r25, Y+35	; 0x23
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <Lcd_DisplayChr+0x560>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9f 8f       	std	Y+31, r25	; 0x1f
    255c:	8e 8f       	std	Y+30, r24	; 0x1e
    255e:	3f c0       	rjmp	.+126    	; 0x25de <Lcd_DisplayChr+0x5de>
	else if (__tmp > 65535)
    2560:	68 a1       	ldd	r22, Y+32	; 0x20
    2562:	79 a1       	ldd	r23, Y+33	; 0x21
    2564:	8a a1       	ldd	r24, Y+34	; 0x22
    2566:	9b a1       	ldd	r25, Y+35	; 0x23
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <Lcd_DisplayChr+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6c a1       	ldd	r22, Y+36	; 0x24
    257a:	7d a1       	ldd	r23, Y+37	; 0x25
    257c:	8e a1       	ldd	r24, Y+38	; 0x26
    257e:	9f a1       	ldd	r25, Y+39	; 0x27
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9f 8f       	std	Y+31, r25	; 0x1f
    259e:	8e 8f       	std	Y+30, r24	; 0x1e
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <Lcd_DisplayChr+0x5c0>
    25a2:	80 e9       	ldi	r24, 0x90	; 144
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	9d 8f       	std	Y+29, r25	; 0x1d
    25a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <Lcd_DisplayChr+0x5ae>
    25b2:	9d 8f       	std	Y+29, r25	; 0x1d
    25b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9f 8f       	std	Y+31, r25	; 0x1f
    25be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <Lcd_DisplayChr+0x5a2>
    25c8:	24 c0       	rjmp	.+72     	; 0x2612 <Lcd_DisplayChr+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	68 a1       	ldd	r22, Y+32	; 0x20
    25cc:	79 a1       	ldd	r23, Y+33	; 0x21
    25ce:	8a a1       	ldd	r24, Y+34	; 0x22
    25d0:	9b a1       	ldd	r25, Y+35	; 0x23
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9f 8f       	std	Y+31, r25	; 0x1f
    25dc:	8e 8f       	std	Y+30, r24	; 0x1e
    25de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25e2:	9b 8f       	std	Y+27, r25	; 0x1b
    25e4:	8a 8f       	std	Y+26, r24	; 0x1a
    25e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <Lcd_DisplayChr+0x5ea>
    25ee:	9b 8f       	std	Y+27, r25	; 0x1b
    25f0:	8a 8f       	std	Y+26, r24	; 0x1a
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <Lcd_DisplayChr+0x612>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25f4:	69 a5       	ldd	r22, Y+41	; 0x29
    25f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    25f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	88 a7       	std	Y+40, r24	; 0x28
    2606:	88 a5       	ldd	r24, Y+40	; 0x28
    2608:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    260a:	89 8d       	ldd	r24, Y+25	; 0x19
    260c:	8a 95       	dec	r24
    260e:	f1 f7       	brne	.-4      	; 0x260c <Lcd_DisplayChr+0x60c>
    2610:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	(*(volatile u8 *)(command+2))&=~(1<<E) ;         //Reset Enable End of the high to low pulse
    2612:	a8 e3       	ldi	r26, 0x38	; 56
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e8 e3       	ldi	r30, 0x38	; 56
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	87 7f       	andi	r24, 0xF7	; 247
    261e:	8c 93       	st	X, r24
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a8 ec       	ldi	r26, 0xC8	; 200
    2626:	b2 e4       	ldi	r27, 0x42	; 66
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	2b ea       	ldi	r18, 0xAB	; 171
    263a:	3a ea       	ldi	r19, 0xAA	; 170
    263c:	4a ea       	ldi	r20, 0xAA	; 170
    263e:	50 e4       	ldi	r21, 0x40	; 64
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	89 8b       	std	Y+17, r24	; 0x11
    264a:	9a 8b       	std	Y+18, r25	; 0x12
    264c:	ab 8b       	std	Y+19, r26	; 0x13
    264e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2650:	69 89       	ldd	r22, Y+17	; 0x11
    2652:	7a 89       	ldd	r23, Y+18	; 0x12
    2654:	8b 89       	ldd	r24, Y+19	; 0x13
    2656:	9c 89       	ldd	r25, Y+20	; 0x14
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	1c f4       	brge	.+6      	; 0x266e <Lcd_DisplayChr+0x66e>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	88 8b       	std	Y+16, r24	; 0x10
    266c:	91 c0       	rjmp	.+290    	; 0x2790 <Lcd_DisplayChr+0x790>
	else if (__tmp > 255)
    266e:	69 89       	ldd	r22, Y+17	; 0x11
    2670:	7a 89       	ldd	r23, Y+18	; 0x12
    2672:	8b 89       	ldd	r24, Y+19	; 0x13
    2674:	9c 89       	ldd	r25, Y+20	; 0x14
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	53 e4       	ldi	r21, 0x43	; 67
    267e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	0c f0       	brlt	.+2      	; 0x2688 <Lcd_DisplayChr+0x688>
    2686:	7b c0       	rjmp	.+246    	; 0x277e <Lcd_DisplayChr+0x77e>
	{
		_delay_ms(__us / 1000.0);
    2688:	6d 89       	ldd	r22, Y+21	; 0x15
    268a:	7e 89       	ldd	r23, Y+22	; 0x16
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a e7       	ldi	r20, 0x7A	; 122
    2696:	54 e4       	ldi	r21, 0x44	; 68
    2698:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	8c 87       	std	Y+12, r24	; 0x0c
    26a2:	9d 87       	std	Y+13, r25	; 0x0d
    26a4:	ae 87       	std	Y+14, r26	; 0x0e
    26a6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    26aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    26ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a e7       	ldi	r20, 0x7A	; 122
    26b6:	55 e4       	ldi	r21, 0x45	; 69
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	88 87       	std	Y+8, r24	; 0x08
    26c2:	99 87       	std	Y+9, r25	; 0x09
    26c4:	aa 87       	std	Y+10, r26	; 0x0a
    26c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26c8:	68 85       	ldd	r22, Y+8	; 0x08
    26ca:	79 85       	ldd	r23, Y+9	; 0x09
    26cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26dc:	88 23       	and	r24, r24
    26de:	2c f4       	brge	.+10     	; 0x26ea <Lcd_DisplayChr+0x6ea>
		__ticks = 1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9f 83       	std	Y+7, r25	; 0x07
    26e6:	8e 83       	std	Y+6, r24	; 0x06
    26e8:	3f c0       	rjmp	.+126    	; 0x2768 <Lcd_DisplayChr+0x768>
	else if (__tmp > 65535)
    26ea:	68 85       	ldd	r22, Y+8	; 0x08
    26ec:	79 85       	ldd	r23, Y+9	; 0x09
    26ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	3f ef       	ldi	r19, 0xFF	; 255
    26f6:	4f e7       	ldi	r20, 0x7F	; 127
    26f8:	57 e4       	ldi	r21, 0x47	; 71
    26fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fe:	18 16       	cp	r1, r24
    2700:	4c f5       	brge	.+82     	; 0x2754 <Lcd_DisplayChr+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2702:	6c 85       	ldd	r22, Y+12	; 0x0c
    2704:	7d 85       	ldd	r23, Y+13	; 0x0d
    2706:	8e 85       	ldd	r24, Y+14	; 0x0e
    2708:	9f 85       	ldd	r25, Y+15	; 0x0f
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e2       	ldi	r20, 0x20	; 32
    2710:	51 e4       	ldi	r21, 0x41	; 65
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	9f 83       	std	Y+7, r25	; 0x07
    2728:	8e 83       	std	Y+6, r24	; 0x06
    272a:	0f c0       	rjmp	.+30     	; 0x274a <Lcd_DisplayChr+0x74a>
    272c:	80 e9       	ldi	r24, 0x90	; 144
    272e:	91 e0       	ldi	r25, 0x01	; 1
    2730:	9d 83       	std	Y+5, r25	; 0x05
    2732:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	9d 81       	ldd	r25, Y+5	; 0x05
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <Lcd_DisplayChr+0x738>
    273c:	9d 83       	std	Y+5, r25	; 0x05
    273e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	9f 81       	ldd	r25, Y+7	; 0x07
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	9f 83       	std	Y+7, r25	; 0x07
    2748:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274a:	8e 81       	ldd	r24, Y+6	; 0x06
    274c:	9f 81       	ldd	r25, Y+7	; 0x07
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	69 f7       	brne	.-38     	; 0x272c <Lcd_DisplayChr+0x72c>
    2752:	24 c0       	rjmp	.+72     	; 0x279c <Lcd_DisplayChr+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2754:	68 85       	ldd	r22, Y+8	; 0x08
    2756:	79 85       	ldd	r23, Y+9	; 0x09
    2758:	8a 85       	ldd	r24, Y+10	; 0x0a
    275a:	9b 85       	ldd	r25, Y+11	; 0x0b
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9f 83       	std	Y+7, r25	; 0x07
    2766:	8e 83       	std	Y+6, r24	; 0x06
    2768:	8e 81       	ldd	r24, Y+6	; 0x06
    276a:	9f 81       	ldd	r25, Y+7	; 0x07
    276c:	9b 83       	std	Y+3, r25	; 0x03
    276e:	8a 83       	std	Y+2, r24	; 0x02
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <Lcd_DisplayChr+0x774>
    2778:	9b 83       	std	Y+3, r25	; 0x03
    277a:	8a 83       	std	Y+2, r24	; 0x02
    277c:	0f c0       	rjmp	.+30     	; 0x279c <Lcd_DisplayChr+0x79c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    277e:	69 89       	ldd	r22, Y+17	; 0x11
    2780:	7a 89       	ldd	r23, Y+18	; 0x12
    2782:	8b 89       	ldd	r24, Y+19	; 0x13
    2784:	9c 89       	ldd	r25, Y+20	; 0x14
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	88 8b       	std	Y+16, r24	; 0x10
    2790:	88 89       	ldd	r24, Y+16	; 0x10
    2792:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	8a 95       	dec	r24
    2798:	f1 f7       	brne	.-4      	; 0x2796 <Lcd_DisplayChr+0x796>
    279a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);

}
    279c:	cf 59       	subi	r28, 0x9F	; 159
    279e:	df 4f       	sbci	r29, 0xFF	; 255
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	1f 91       	pop	r17
    27b0:	0f 91       	pop	r16
    27b2:	08 95       	ret

000027b4 <Lcd_DisplayStr>:

volatile void Lcd_DisplayStr(u8* str)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <Lcd_DisplayStr+0x6>
    27ba:	0f 92       	push	r0
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9b 83       	std	Y+3, r25	; 0x03
    27c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0 ;
    27c4:	19 82       	std	Y+1, r1	; 0x01
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <Lcd_DisplayStr+0x30>
	while(str[i]!=0){Lcd_DisplayChr(str[i]) ; i++;}
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	fc 01       	movw	r30, r24
    27d4:	e2 0f       	add	r30, r18
    27d6:	f3 1f       	adc	r31, r19
    27d8:	80 81       	ld	r24, Z
    27da:	0e 94 00 10 	call	0x2000	; 0x2000 <Lcd_DisplayChr>
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	fc 01       	movw	r30, r24
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	80 81       	ld	r24, Z
    27f6:	88 23       	and	r24, r24
    27f8:	39 f7       	brne	.-50     	; 0x27c8 <Lcd_DisplayStr+0x14>

}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <Lcd_Cursor_OFF>:

volatile void Lcd_Cursor_OFF()						// Disable cursor printing
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
	Lcd_Cmd(0x0c);
    280e:	8c e0       	ldi	r24, 0x0C	; 12
    2810:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
}
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <Lcd_Clear>:

volatile void Lcd_Clear()							// Clear screen
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
	Lcd_Cmd(0x01);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <Lcd_GoToRowColumn>:

void Lcd_GoToRowColumn(u8 row,u8 column)			// Move cursor to the desired position (row and column)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <Lcd_GoToRowColumn+0x6>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <Lcd_GoToRowColumn+0x8>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	3c 83       	std	Y+4, r19	; 0x04
    2846:	2b 83       	std	Y+3, r18	; 0x03
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	31 f0       	breq	.+12     	; 0x285c <Lcd_GoToRowColumn+0x2e>
    2850:	2b 81       	ldd	r18, Y+3	; 0x03
    2852:	3c 81       	ldd	r19, Y+4	; 0x04
    2854:	21 30       	cpi	r18, 0x01	; 1
    2856:	31 05       	cpc	r19, r1
    2858:	31 f0       	breq	.+12     	; 0x2866 <Lcd_GoToRowColumn+0x38>
    285a:	09 c0       	rjmp	.+18     	; 0x286e <Lcd_GoToRowColumn+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+column);
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	80 58       	subi	r24, 0x80	; 128
    2860:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
    2864:	04 c0       	rjmp	.+8      	; 0x286e <Lcd_GoToRowColumn+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	80 54       	subi	r24, 0x40	; 64
    286a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Lcd_Cmd>
		break;
	}
}
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <Buzzer_Init>:
 */


#include "Buzzer_Interface.h"
void Buzzer_Init(void)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_CHANNEL,OUTPUT);
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	63 e0       	ldi	r22, 0x03	; 3
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Dio_ConfigChannel>
}
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <Buzzer_TurnON>:
void Buzzer_TurnON(void)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_CHANNEL,STD_HIGH);
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
}
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <Buzzer_TurnOFF>:
void Buzzer_TurnOFF(void)
{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_CHANNEL,STD_LOW);
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	63 e0       	ldi	r22, 0x03	; 3
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Dio_WriteChannel>
}
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <Buzzer_Toggle>:
void Buzzer_Toggle(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(BUZZER_PORT,BUZZER_CHANNEL);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	63 e0       	ldi	r22, 0x03	; 3
    28d0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_FlipChannel>
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <__vector_13>:
#include "Uart_Interface.h"

volatile u8 data_master_master;

ISR(USART_RXC_vect)						// Interrupt service routine (ISR) for USART master reception (HC05 BT module)
{
    28da:	1f 92       	push	r1
    28dc:	0f 92       	push	r0
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	0f 92       	push	r0
    28e2:	11 24       	eor	r1, r1
    28e4:	2f 93       	push	r18
    28e6:	3f 93       	push	r19
    28e8:	4f 93       	push	r20
    28ea:	5f 93       	push	r21
    28ec:	6f 93       	push	r22
    28ee:	7f 93       	push	r23
    28f0:	8f 93       	push	r24
    28f2:	9f 93       	push	r25
    28f4:	af 93       	push	r26
    28f6:	bf 93       	push	r27
    28f8:	ef 93       	push	r30
    28fa:	ff 93       	push	r31
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	DisableAllInterrupts();
    2904:	0e 94 80 07 	call	0xf00	; 0xf00 <DisableAllInterrupts>
	SPI_SPDR_REG = UART_UDR_REG;
    2908:	ef e2       	ldi	r30, 0x2F	; 47
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	ac e2       	ldi	r26, 0x2C	; 44
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	8c 91       	ld	r24, X
    2912:	80 83       	st	Z, r24
	EnableAllInterrupts();
    2914:	0e 94 72 07 	call	0xee4	; 0xee4 <EnableAllInterrupts>
}
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	ff 91       	pop	r31
    291e:	ef 91       	pop	r30
    2920:	bf 91       	pop	r27
    2922:	af 91       	pop	r26
    2924:	9f 91       	pop	r25
    2926:	8f 91       	pop	r24
    2928:	7f 91       	pop	r23
    292a:	6f 91       	pop	r22
    292c:	5f 91       	pop	r21
    292e:	4f 91       	pop	r20
    2930:	3f 91       	pop	r19
    2932:	2f 91       	pop	r18
    2934:	0f 90       	pop	r0
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	0f 90       	pop	r0
    293a:	1f 90       	pop	r1
    293c:	18 95       	reti

0000293e <__vector_12>:

ISR(SPI_STC_vect)						// Interrupt service routine (ISR) for SPI master transmission
{
    293e:	1f 92       	push	r1
    2940:	0f 92       	push	r0
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	0f 92       	push	r0
    2946:	11 24       	eor	r1, r1
    2948:	2f 93       	push	r18
    294a:	3f 93       	push	r19
    294c:	4f 93       	push	r20
    294e:	5f 93       	push	r21
    2950:	6f 93       	push	r22
    2952:	7f 93       	push	r23
    2954:	8f 93       	push	r24
    2956:	9f 93       	push	r25
    2958:	af 93       	push	r26
    295a:	bf 93       	push	r27
    295c:	ef 93       	push	r30
    295e:	ff 93       	push	r31
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
	DisableAllInterrupts();
    2968:	0e 94 80 07 	call	0xf00	; 0xf00 <DisableAllInterrupts>
	EnableAllInterrupts();
    296c:	0e 94 72 07 	call	0xee4	; 0xee4 <EnableAllInterrupts>
}
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	ff 91       	pop	r31
    2976:	ef 91       	pop	r30
    2978:	bf 91       	pop	r27
    297a:	af 91       	pop	r26
    297c:	9f 91       	pop	r25
    297e:	8f 91       	pop	r24
    2980:	7f 91       	pop	r23
    2982:	6f 91       	pop	r22
    2984:	5f 91       	pop	r21
    2986:	4f 91       	pop	r20
    2988:	3f 91       	pop	r19
    298a:	2f 91       	pop	r18
    298c:	0f 90       	pop	r0
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	0f 90       	pop	r0
    2992:	1f 90       	pop	r1
    2994:	18 95       	reti

00002996 <main>:
void welcome(void);
void menu(void);

int main()
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	2e 97       	sbiw	r28, 0x0e	; 14
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
	Lcd_Init();							// LCD initialization
    29aa:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Lcd_Init>
	Spi_MasterInit();					// SPI master initialization
    29ae:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Spi_MasterInit>
	UART_Init(UART_BAUDRATE_9600);		// LCD initialization
    29b2:	87 e6       	ldi	r24, 0x67	; 103
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_Init>
	EnableAllInterrupts();				// Enable global interrupt
    29ba:	0e 94 72 07 	call	0xee4	; 0xee4 <EnableAllInterrupts>

	welcome();							// Welcome message display
    29be:	0e 94 56 15 	call	0x2aac	; 0x2aac <welcome>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	aa ef       	ldi	r26, 0xFA	; 250
    29c8:	b4 e4       	ldi	r27, 0x44	; 68
    29ca:	8b 87       	std	Y+11, r24	; 0x0b
    29cc:	9c 87       	std	Y+12, r25	; 0x0c
    29ce:	ad 87       	std	Y+13, r26	; 0x0d
    29d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a e7       	ldi	r20, 0x7A	; 122
    29e0:	55 e4       	ldi	r21, 0x45	; 69
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	8f 83       	std	Y+7, r24	; 0x07
    29ec:	98 87       	std	Y+8, r25	; 0x08
    29ee:	a9 87       	std	Y+9, r26	; 0x09
    29f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	2c f4       	brge	.+10     	; 0x2a14 <main+0x7e>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <main+0xfc>
	else if (__tmp > 65535)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	4c f5       	brge	.+82     	; 0x2a7e <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <main+0xde>
    2a56:	80 e9       	ldi	r24, 0x90	; 144
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <main+0xcc>
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <main+0xc0>
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <main+0x108>
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	menu();								// Main menu display
    2aa6:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <menu>
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <main+0x114>

00002aac <welcome>:

	return(0);
}

void welcome(void)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
	Lcd_Clear();
    2ab4:	0e 94 0d 14 	call	0x281a	; 0x281a <Lcd_Clear>
	Lcd_GoToRowColumn(0,0);
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	70 e0       	ldi	r23, 0x00	; 0
    2ac0:	0e 94 17 14 	call	0x282e	; 0x282e <Lcd_GoToRowColumn>
	Lcd_DisplayStr("welcome to...");
    2ac4:	80 e6       	ldi	r24, 0x60	; 96
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <Lcd_DisplayStr>
	Lcd_GoToRowColumn(1,0);
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	0e 94 17 14 	call	0x282e	; 0x282e <Lcd_GoToRowColumn>
	Lcd_DisplayStr("our smart home");
    2ad8:	8e e6       	ldi	r24, 0x6E	; 110
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 da 13 	call	0x27b4	; 0x27b4 <Lcd_DisplayStr>
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <menu>:

void menu(void)
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
	Lcd_Clear();
    2aee:	0e 94 0d 14 	call	0x281a	; 0x281a <Lcd_Clear>
	Lcd_GoToRowColumn(0,0);
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	0e 94 17 14 	call	0x282e	; 0x282e <Lcd_GoToRowColumn>
	Lcd_DisplayStr("1-LED1	 2-Buzzer");
    2afe:	8d e7       	ldi	r24, 0x7D	; 125
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 da 13 	call	0x27b4	; 0x27b4 <Lcd_DisplayStr>
	Lcd_GoToRowColumn(1,0);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	0e 94 17 14 	call	0x282e	; 0x282e <Lcd_GoToRowColumn>
	Lcd_DisplayStr("3-Relay");
    2b12:	8e e8       	ldi	r24, 0x8E	; 142
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 da 13 	call	0x27b4	; 0x27b4 <Lcd_DisplayStr>

}
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <__prologue_saves__>:
    2b20:	2f 92       	push	r2
    2b22:	3f 92       	push	r3
    2b24:	4f 92       	push	r4
    2b26:	5f 92       	push	r5
    2b28:	6f 92       	push	r6
    2b2a:	7f 92       	push	r7
    2b2c:	8f 92       	push	r8
    2b2e:	9f 92       	push	r9
    2b30:	af 92       	push	r10
    2b32:	bf 92       	push	r11
    2b34:	cf 92       	push	r12
    2b36:	df 92       	push	r13
    2b38:	ef 92       	push	r14
    2b3a:	ff 92       	push	r15
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	ca 1b       	sub	r28, r26
    2b4a:	db 0b       	sbc	r29, r27
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	09 94       	ijmp

00002b58 <__epilogue_restores__>:
    2b58:	2a 88       	ldd	r2, Y+18	; 0x12
    2b5a:	39 88       	ldd	r3, Y+17	; 0x11
    2b5c:	48 88       	ldd	r4, Y+16	; 0x10
    2b5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b6e:	df 80       	ldd	r13, Y+7	; 0x07
    2b70:	ee 80       	ldd	r14, Y+6	; 0x06
    2b72:	fd 80       	ldd	r15, Y+5	; 0x05
    2b74:	0c 81       	ldd	r16, Y+4	; 0x04
    2b76:	1b 81       	ldd	r17, Y+3	; 0x03
    2b78:	aa 81       	ldd	r26, Y+2	; 0x02
    2b7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b7c:	ce 0f       	add	r28, r30
    2b7e:	d1 1d       	adc	r29, r1
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	ed 01       	movw	r28, r26
    2b8c:	08 95       	ret

00002b8e <_exit>:
    2b8e:	f8 94       	cli

00002b90 <__stop_program>:
    2b90:	ff cf       	rjmp	.-2      	; 0x2b90 <__stop_program>
