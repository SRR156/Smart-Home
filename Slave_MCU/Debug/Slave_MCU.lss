
Slave_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002ab0  00002b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002430  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011e6  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006162  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000062c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006451  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009597  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <main>
      7a:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e7       	ldi	r22, 0x7C	; 124
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <Spi_MasterInit>:
 *  Description	:
 *
 *************************************************/
#include "Spi.h"
void Spi_MasterInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, OUTPUT);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	65 e0       	ldi	r22, 0x05	; 5
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	configure SPI SS Pin as output	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, OUTPUT);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	64 e0       	ldi	r22, 0x04	; 4
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as output	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, OUTPUT);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	67 e0       	ldi	r22, 0x07	; 7
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as input	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, INPUT);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	66 e0       	ldi	r22, 0x06	; 6
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_WriteChannel(SPI_SS_PORT, SPI_SS_CHANNEL, STD_LOW);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	64 e0       	ldi	r22, 0x04	; 4
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
//	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
//	/*	enable SPI Module in Master mode	*/
//	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
//	/*	set SCK frequency by F_CPU/16	*/
//	SPI_SPCR_REG|=SPI_SCK_FREQ_FCPU_DIV_16;
	SPI_SPCR_REG = 0x53;
     cc8:	ed e2       	ldi	r30, 0x2D	; 45
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	83 e5       	ldi	r24, 0x53	; 83
     cce:	80 83       	st	Z, r24
	SPI_SPSR_REG = 0x00;
     cd0:	ee e2       	ldi	r30, 0x2E	; 46
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <Spi_SlaveInit>:

void Spi_SlaveInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, INPUT);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	65 e0       	ldi	r22, 0x05	; 5
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	configure SPI SS Pin as input	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, INPUT);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	64 e0       	ldi	r22, 0x04	; 4
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as input	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, INPUT);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	67 e0       	ldi	r22, 0x07	; 7
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as output	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, OUTPUT);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	66 e0       	ldi	r22, 0x06	; 6
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
//	/*	enable SPI Module	*/
//	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
//	/*	enable SPI Module in Slave mode	*/
//	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);

	SPI_SPCR_REG = 0x43;
     d0c:	ed e2       	ldi	r30, 0x2D	; 45
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	83 e4       	ldi	r24, 0x43	; 67
     d12:	80 83       	st	Z, r24
	SPI_SPSR_REG = 0x00;
     d14:	ee e2       	ldi	r30, 0x2E	; 46
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	10 82       	st	Z, r1
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Spi_MasterWrite+0x6>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
     d2c:	ef e2       	ldi	r30, 0x2F	; 47
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     d34:	ee e2       	ldi	r30, 0x2E	; 46
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	88 23       	and	r24, r24
     d3c:	dc f7       	brge	.-10     	; 0xd34 <Spi_MasterWrite+0x14>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
     d3e:	ef e2       	ldi	r30, 0x2F	; 47
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	89 83       	std	Y+1, r24	; 0x01
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <Spi_MasterRead>:
u8 Spi_MasterRead(void)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
     d5e:	ef e2       	ldi	r30, 0x2F	; 47
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     d66:	ee e2       	ldi	r30, 0x2E	; 46
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	88 23       	and	r24, r24
     d6e:	dc f7       	brge	.-10     	; 0xd66 <Spi_MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
     d70:	ef e2       	ldi	r30, 0x2F	; 47
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
}
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <Spi_MasterTranseve>:

u8 Spi_MasterTranseve(u8 data)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	0f 92       	push	r0
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
     d8a:	ef e2       	ldi	r30, 0x2F	; 47
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     d92:	ee e2       	ldi	r30, 0x2E	; 46
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	dc f7       	brge	.-10     	; 0xd92 <Spi_MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
     d9c:	ef e2       	ldi	r30, 0x2F	; 47
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
}
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <Spi_SlaveRead>:
u8 Spi_SlaveRead(void)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
     db2:	ee e2       	ldi	r30, 0x2E	; 46
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	dc f7       	brge	.-10     	; 0xdb2 <Spi_SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
     dbc:	ef e2       	ldi	r30, 0x2F	; 47
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <Spi_SlaveWrite>:
void Spi_SlaveWrite(u8 data)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
     dd4:	ef e2       	ldi	r30, 0x2F	; 47
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 83       	st	Z, r24
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <Dio_ConfigChannel>:
 */

#include "Dio_Interface.h"

void Dio_ConfigChannel(Dio_Port port,Dio_Channel channel, Dio_Direction direction)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <Dio_ConfigChannel+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <Dio_ConfigChannel+0x8>
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	6a 83       	std	Y+2, r22	; 0x02
     df6:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	3d 83       	std	Y+5, r19	; 0x05
     e00:	2c 83       	std	Y+4, r18	; 0x04
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	91 05       	cpc	r25, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <Dio_ConfigChannel+0x2a>
     e0c:	43 c0       	rjmp	.+134    	; 0xe94 <Dio_ConfigChannel+0xb0>
     e0e:	2c 81       	ldd	r18, Y+4	; 0x04
     e10:	3d 81       	ldd	r19, Y+5	; 0x05
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	2c f4       	brge	.+10     	; 0xe22 <Dio_ConfigChannel+0x3e>
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	9d 81       	ldd	r25, Y+5	; 0x05
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	71 f0       	breq	.+28     	; 0xe3c <Dio_ConfigChannel+0x58>
     e20:	bc c0       	rjmp	.+376    	; 0xf9a <Dio_ConfigChannel+0x1b6>
     e22:	2c 81       	ldd	r18, Y+4	; 0x04
     e24:	3d 81       	ldd	r19, Y+5	; 0x05
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	09 f4       	brne	.+2      	; 0xe2e <Dio_ConfigChannel+0x4a>
     e2c:	5f c0       	rjmp	.+190    	; 0xeec <Dio_ConfigChannel+0x108>
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	9d 81       	ldd	r25, Y+5	; 0x05
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	91 05       	cpc	r25, r1
     e36:	09 f4       	brne	.+2      	; 0xe3a <Dio_ConfigChannel+0x56>
     e38:	85 c0       	rjmp	.+266    	; 0xf44 <Dio_ConfigChannel+0x160>
     e3a:	af c0       	rjmp	.+350    	; 0xf9a <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == INPUT)
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 23       	and	r24, r24
     e40:	a9 f4       	brne	.+42     	; 0xe6c <Dio_ConfigChannel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,channel);
     e42:	aa e3       	ldi	r26, 0x3A	; 58
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ea e3       	ldi	r30, 0x3A	; 58
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <Dio_ConfigChannel+0x7c>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <Dio_ConfigChannel+0x78>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	97 c0       	rjmp	.+302    	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,channel);
     e6c:	aa e3       	ldi	r26, 0x3A	; 58
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <Dio_ConfigChannel+0xa6>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <Dio_ConfigChannel+0xa2>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	83 c0       	rjmp	.+262    	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (direction == INPUT)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	88 23       	and	r24, r24
     e98:	a9 f4       	brne	.+42     	; 0xec4 <Dio_ConfigChannel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,channel);
     e9a:	a7 e3       	ldi	r26, 0x37	; 55
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e3       	ldi	r30, 0x37	; 55
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <Dio_ConfigChannel+0xd4>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <Dio_ConfigChannel+0xd0>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	6b c0       	rjmp	.+214    	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,channel);
     ec4:	a7 e3       	ldi	r26, 0x37	; 55
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e3       	ldi	r30, 0x37	; 55
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <Dio_ConfigChannel+0xfe>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <Dio_ConfigChannel+0xfa>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	57 c0       	rjmp	.+174    	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (direction == INPUT)
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	88 23       	and	r24, r24
     ef0:	a9 f4       	brne	.+42     	; 0xf1c <Dio_ConfigChannel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,channel);
     ef2:	a4 e3       	ldi	r26, 0x34	; 52
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e4 e3       	ldi	r30, 0x34	; 52
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <Dio_ConfigChannel+0x12c>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <Dio_ConfigChannel+0x128>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,channel);
     f1c:	a4 e3       	ldi	r26, 0x34	; 52
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e4 e3       	ldi	r30, 0x34	; 52
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <Dio_ConfigChannel+0x156>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <Dio_ConfigChannel+0x152>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	2b c0       	rjmp	.+86     	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (direction == INPUT)
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	88 23       	and	r24, r24
     f48:	a9 f4       	brne	.+42     	; 0xf74 <Dio_ConfigChannel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,channel);
     f4a:	a1 e3       	ldi	r26, 0x31	; 49
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e1 e3       	ldi	r30, 0x31	; 49
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Dio_ConfigChannel+0x184>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Dio_ConfigChannel+0x180>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	13 c0       	rjmp	.+38     	; 0xf9a <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,channel);
     f74:	a1 e3       	ldi	r26, 0x31	; 49
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e3       	ldi	r30, 0x31	; 49
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <Dio_ConfigChannel+0x1ae>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <Dio_ConfigChannel+0x1aa>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
		}
		break;
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <Dio_WriteChannel>:
void Dio_WriteChannel(Dio_Port port,Dio_Channel channel, Dio_Level level)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Dio_WriteChannel+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Dio_WriteChannel+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6a 83       	std	Y+2, r22	; 0x02
     fbc:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d 83       	std	Y+5, r19	; 0x05
     fc6:	2c 83       	std	Y+4, r18	; 0x04
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <Dio_WriteChannel+0x2a>
     fd2:	43 c0       	rjmp	.+134    	; 0x105a <Dio_WriteChannel+0xb0>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <Dio_WriteChannel+0x3e>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	71 f0       	breq	.+28     	; 0x1002 <Dio_WriteChannel+0x58>
     fe6:	bc c0       	rjmp	.+376    	; 0x1160 <Dio_WriteChannel+0x1b6>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <Dio_WriteChannel+0x4a>
     ff2:	5f c0       	rjmp	.+190    	; 0x10b2 <Dio_WriteChannel+0x108>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <Dio_WriteChannel+0x56>
     ffe:	85 c0       	rjmp	.+266    	; 0x110a <Dio_WriteChannel+0x160>
    1000:	af c0       	rjmp	.+350    	; 0x1160 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 23       	and	r24, r24
    1006:	a9 f4       	brne	.+42     	; 0x1032 <Dio_WriteChannel+0x88>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <Dio_WriteChannel+0x7c>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <Dio_WriteChannel+0x78>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	97 c0       	rjmp	.+302    	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
    1032:	ab e3       	ldi	r26, 0x3B	; 59
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <Dio_WriteChannel+0xa6>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <Dio_WriteChannel+0xa2>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	83 c0       	rjmp	.+262    	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (level == STD_LOW)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 23       	and	r24, r24
    105e:	a9 f4       	brne	.+42     	; 0x108a <Dio_WriteChannel+0xe0>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <Dio_WriteChannel+0xd4>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <Dio_WriteChannel+0xd0>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	6b c0       	rjmp	.+214    	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
    108a:	a8 e3       	ldi	r26, 0x38	; 56
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e3       	ldi	r30, 0x38	; 56
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <Dio_WriteChannel+0xfe>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <Dio_WriteChannel+0xfa>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	57 c0       	rjmp	.+174    	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (level == STD_LOW)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 23       	and	r24, r24
    10b6:	a9 f4       	brne	.+42     	; 0x10e2 <Dio_WriteChannel+0x138>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Dio_WriteChannel+0x12c>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <Dio_WriteChannel+0x128>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
    10e2:	a5 e3       	ldi	r26, 0x35	; 53
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e3       	ldi	r30, 0x35	; 53
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <Dio_WriteChannel+0x156>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <Dio_WriteChannel+0x152>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	2b c0       	rjmp	.+86     	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (level == STD_LOW)
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 23       	and	r24, r24
    110e:	a9 f4       	brne	.+42     	; 0x113a <Dio_WriteChannel+0x190>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <Dio_WriteChannel+0x184>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <Dio_WriteChannel+0x180>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
    113a:	a2 e3       	ldi	r26, 0x32	; 50
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e2 e3       	ldi	r30, 0x32	; 50
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <Dio_WriteChannel+0x1ae>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <Dio_WriteChannel+0x1aa>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
		}
		break;
	}
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <Dio_FlipChannel>:
void Dio_FlipChannel(Dio_Port port,Dio_Channel channel)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <Dio_FlipChannel+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <Dio_FlipChannel+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3c 83       	std	Y+4, r19	; 0x04
    1188:	2b 83       	std	Y+3, r18	; 0x03
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	91 05       	cpc	r25, r1
    1192:	49 f1       	breq	.+82     	; 0x11e6 <Dio_FlipChannel+0x76>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <Dio_FlipChannel+0x38>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 f0       	breq	.+24     	; 0x11be <Dio_FlipChannel+0x4e>
    11a6:	5a c0       	rjmp	.+180    	; 0x125c <Dio_FlipChannel+0xec>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f1       	breq	.+92     	; 0x120e <Dio_FlipChannel+0x9e>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 05       	cpc	r25, r1
    11ba:	e9 f1       	breq	.+122    	; 0x1236 <Dio_FlipChannel+0xc6>
    11bc:	4f c0       	rjmp	.+158    	; 0x125c <Dio_FlipChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,channel);
    11be:	ab e3       	ldi	r26, 0x3B	; 59
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	eb e3       	ldi	r30, 0x3B	; 59
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <Dio_FlipChannel+0x6c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <Dio_FlipChannel+0x68>
    11e0:	84 27       	eor	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	3b c0       	rjmp	.+118    	; 0x125c <Dio_FlipChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,channel);
    11e6:	a8 e3       	ldi	r26, 0x38	; 56
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e8 e3       	ldi	r30, 0x38	; 56
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <Dio_FlipChannel+0x94>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <Dio_FlipChannel+0x90>
    1208:	84 27       	eor	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	27 c0       	rjmp	.+78     	; 0x125c <Dio_FlipChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,channel);
    120e:	a5 e3       	ldi	r26, 0x35	; 53
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e3       	ldi	r30, 0x35	; 53
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <Dio_FlipChannel+0xbc>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <Dio_FlipChannel+0xb8>
    1230:	84 27       	eor	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	13 c0       	rjmp	.+38     	; 0x125c <Dio_FlipChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,channel);
    1236:	a2 e3       	ldi	r26, 0x32	; 50
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e2 e3       	ldi	r30, 0x32	; 50
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <Dio_FlipChannel+0xe4>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <Dio_FlipChannel+0xe0>
    1258:	84 27       	eor	r24, r20
    125a:	8c 93       	st	X, r24
		break;
	}
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <Dio_ReadChannel>:
Dio_Level Dio_ReadChannel(Dio_Port port,Dio_Channel channel)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <Dio_ReadChannel+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <Dio_ReadChannel+0x8>
    1272:	0f 92       	push	r0
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_Level ret_level;
	switch (port)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3d 83       	std	Y+5, r19	; 0x05
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	4c 81       	ldd	r20, Y+4	; 0x04
    1288:	5d 81       	ldd	r21, Y+5	; 0x05
    128a:	41 30       	cpi	r20, 0x01	; 1
    128c:	51 05       	cpc	r21, r1
    128e:	41 f1       	breq	.+80     	; 0x12e0 <Dio_ReadChannel+0x76>
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	91 05       	cpc	r25, r1
    1298:	34 f4       	brge	.+12     	; 0x12a6 <Dio_ReadChannel+0x3c>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	61 f0       	breq	.+24     	; 0x12bc <Dio_ReadChannel+0x52>
    12a4:	52 c0       	rjmp	.+164    	; 0x134a <Dio_ReadChannel+0xe0>
    12a6:	4c 81       	ldd	r20, Y+4	; 0x04
    12a8:	5d 81       	ldd	r21, Y+5	; 0x05
    12aa:	42 30       	cpi	r20, 0x02	; 2
    12ac:	51 05       	cpc	r21, r1
    12ae:	51 f1       	breq	.+84     	; 0x1304 <Dio_ReadChannel+0x9a>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	91 05       	cpc	r25, r1
    12b8:	b9 f1       	breq	.+110    	; 0x1328 <Dio_ReadChannel+0xbe>
    12ba:	47 c0       	rjmp	.+142    	; 0x134a <Dio_ReadChannel+0xe0>
	{
	case DIO_PORTA:
		ret_level = CHECK_BIT(DIO_PINA_REG,channel);
    12bc:	e9 e3       	ldi	r30, 0x39	; 57
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <Dio_ReadChannel+0x6a>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <Dio_ReadChannel+0x66>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	35 c0       	rjmp	.+106    	; 0x134a <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTB:
		ret_level = CHECK_BIT(DIO_PINB_REG,channel);
    12e0:	e6 e3       	ldi	r30, 0x36	; 54
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a9 01       	movw	r20, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <Dio_ReadChannel+0x8e>
    12f4:	55 95       	asr	r21
    12f6:	47 95       	ror	r20
    12f8:	8a 95       	dec	r24
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <Dio_ReadChannel+0x8a>
    12fc:	ca 01       	movw	r24, r20
    12fe:	81 70       	andi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	23 c0       	rjmp	.+70     	; 0x134a <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTC:
		ret_level = CHECK_BIT(DIO_PINC_REG,channel);
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <Dio_ReadChannel+0xb2>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <Dio_ReadChannel+0xae>
    1320:	ca 01       	movw	r24, r20
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	11 c0       	rjmp	.+34     	; 0x134a <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTD:
		ret_level = CHECK_BIT(DIO_PIND_REG,channel);
    1328:	e0 e3       	ldi	r30, 0x30	; 48
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <Dio_ReadChannel+0xd6>
    133c:	55 95       	asr	r21
    133e:	47 95       	ror	r20
    1340:	8a 95       	dec	r24
    1342:	e2 f7       	brpl	.-8      	; 0x133c <Dio_ReadChannel+0xd2>
    1344:	ca 01       	movw	r24, r20
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_level;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <Dio_WriteChannels>:
void Dio_WriteChannels(Dio_Port port,u8 value,u8 mask)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <Dio_WriteChannels+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <Dio_WriteChannels+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	6a 83       	std	Y+2, r22	; 0x02
    136e:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	2c 83       	std	Y+4, r18	; 0x04
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	29 f1       	breq	.+74     	; 0x13ce <Dio_WriteChannels+0x72>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <Dio_WriteChannels+0x3c>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	61 f0       	breq	.+24     	; 0x13ae <Dio_WriteChannels+0x52>
    1396:	4a c0       	rjmp	.+148    	; 0x142c <Dio_WriteChannels+0xd0>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	31 f1       	breq	.+76     	; 0x13ee <Dio_WriteChannels+0x92>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	89 f1       	breq	.+98     	; 0x140e <Dio_WriteChannels+0xb2>
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <Dio_WriteChannels+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG= (DIO_PORTA_REG & ~mask)|(value & mask);
    13ae:	ab e3       	ldi	r26, 0x3B	; 59
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	98 2f       	mov	r25, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	80 95       	com	r24
    13be:	29 2f       	mov	r18, r25
    13c0:	28 23       	and	r18, r24
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	89 23       	and	r24, r25
    13c8:	82 2b       	or	r24, r18
    13ca:	8c 93       	st	X, r24
    13cc:	2f c0       	rjmp	.+94     	; 0x142c <Dio_WriteChannels+0xd0>
		break;
	case DIO_PORTB:
		DIO_PORTB_REG= (DIO_PORTB_REG & ~mask)|(value & mask);
    13ce:	a8 e3       	ldi	r26, 0x38	; 56
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	98 2f       	mov	r25, r24
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	80 95       	com	r24
    13de:	29 2f       	mov	r18, r25
    13e0:	28 23       	and	r18, r24
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	89 23       	and	r24, r25
    13e8:	82 2b       	or	r24, r18
    13ea:	8c 93       	st	X, r24
    13ec:	1f c0       	rjmp	.+62     	; 0x142c <Dio_WriteChannels+0xd0>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG= (DIO_PORTC_REG & ~mask)|(value & mask);
    13ee:	a5 e3       	ldi	r26, 0x35	; 53
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e5 e3       	ldi	r30, 0x35	; 53
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	98 2f       	mov	r25, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	80 95       	com	r24
    13fe:	29 2f       	mov	r18, r25
    1400:	28 23       	and	r18, r24
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	89 23       	and	r24, r25
    1408:	82 2b       	or	r24, r18
    140a:	8c 93       	st	X, r24
    140c:	0f c0       	rjmp	.+30     	; 0x142c <Dio_WriteChannels+0xd0>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG= (DIO_PORTD_REG & ~mask)|(value & mask);
    140e:	a2 e3       	ldi	r26, 0x32	; 50
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	98 2f       	mov	r25, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	80 95       	com	r24
    141e:	29 2f       	mov	r18, r25
    1420:	28 23       	and	r18, r24
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	89 23       	and	r24, r25
    1428:	82 2b       	or	r24, r18
    142a:	8c 93       	st	X, r24
		break;
	}
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <Dio_ConfigChannels>:
void Dio_ConfigChannels(Dio_Port port,u8 mask,Dio_Direction direction)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <Dio_ConfigChannels+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <Dio_ConfigChannels+0x8>
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	6a 83       	std	Y+2, r22	; 0x02
    144e:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3d 83       	std	Y+5, r19	; 0x05
    1458:	2c 83       	std	Y+4, r18	; 0x04
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	69 f1       	breq	.+90     	; 0x14be <Dio_ConfigChannels+0x82>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <Dio_ConfigChannels+0x3c>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	69 f0       	breq	.+26     	; 0x1490 <Dio_ConfigChannels+0x54>
    1476:	67 c0       	rjmp	.+206    	; 0x1546 <Dio_ConfigChannels+0x10a>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	a9 f1       	breq	.+106    	; 0x14ec <Dio_ConfigChannels+0xb0>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <Dio_ConfigChannels+0x52>
    148c:	46 c0       	rjmp	.+140    	; 0x151a <Dio_ConfigChannels+0xde>
    148e:	5b c0       	rjmp	.+182    	; 0x1546 <Dio_ConfigChannels+0x10a>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 23       	and	r24, r24
    1494:	59 f4       	brne	.+22     	; 0x14ac <Dio_ConfigChannels+0x70>
		{
			DIO_DDRA_REG= (DIO_DDRA_REG & ~mask);
    1496:	aa e3       	ldi	r26, 0x3A	; 58
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	ea e3       	ldi	r30, 0x3A	; 58
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	98 2f       	mov	r25, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 95       	com	r24
    14a6:	89 23       	and	r24, r25
    14a8:	8c 93       	st	X, r24
    14aa:	4d c0       	rjmp	.+154    	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRA_REG |= mask;
    14ac:	aa e3       	ldi	r26, 0x3A	; 58
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ea e3       	ldi	r30, 0x3A	; 58
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	90 81       	ld	r25, Z
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	89 2b       	or	r24, r25
    14ba:	8c 93       	st	X, r24
    14bc:	44 c0       	rjmp	.+136    	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		break;
	case DIO_PORTB:
		if (direction == INPUT)
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 23       	and	r24, r24
    14c2:	59 f4       	brne	.+22     	; 0x14da <Dio_ConfigChannels+0x9e>
		{
			DIO_DDRB_REG= (DIO_DDRB_REG & ~mask);
    14c4:	a7 e3       	ldi	r26, 0x37	; 55
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e7 e3       	ldi	r30, 0x37	; 55
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	98 2f       	mov	r25, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 95       	com	r24
    14d4:	89 23       	and	r24, r25
    14d6:	8c 93       	st	X, r24
    14d8:	36 c0       	rjmp	.+108    	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRB_REG |= mask;
    14da:	a7 e3       	ldi	r26, 0x37	; 55
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e7 e3       	ldi	r30, 0x37	; 55
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	90 81       	ld	r25, Z
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	89 2b       	or	r24, r25
    14e8:	8c 93       	st	X, r24
    14ea:	2d c0       	rjmp	.+90     	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		break;
	case DIO_PORTC:
		if (direction == INPUT)
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 23       	and	r24, r24
    14f0:	59 f4       	brne	.+22     	; 0x1508 <Dio_ConfigChannels+0xcc>
		{
			DIO_DDRC_REG= (DIO_DDRC_REG & ~mask);
    14f2:	a4 e3       	ldi	r26, 0x34	; 52
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e4 e3       	ldi	r30, 0x34	; 52
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	98 2f       	mov	r25, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 95       	com	r24
    1502:	89 23       	and	r24, r25
    1504:	8c 93       	st	X, r24
    1506:	1f c0       	rjmp	.+62     	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRC_REG |= mask;
    1508:	a4 e3       	ldi	r26, 0x34	; 52
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e4 e3       	ldi	r30, 0x34	; 52
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	90 81       	ld	r25, Z
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	89 2b       	or	r24, r25
    1516:	8c 93       	st	X, r24
    1518:	16 c0       	rjmp	.+44     	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		break;
	case DIO_PORTD:
		if (direction == INPUT)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 23       	and	r24, r24
    151e:	59 f4       	brne	.+22     	; 0x1536 <Dio_ConfigChannels+0xfa>
		{
			DIO_DDRD_REG= (DIO_DDRD_REG & ~mask);
    1520:	a1 e3       	ldi	r26, 0x31	; 49
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e1 e3       	ldi	r30, 0x31	; 49
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	98 2f       	mov	r25, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 95       	com	r24
    1530:	89 23       	and	r24, r25
    1532:	8c 93       	st	X, r24
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <Dio_ConfigChannels+0x10a>
		}
		else
		{
			DIO_DDRD_REG |= mask;
    1536:	a1 e3       	ldi	r26, 0x31	; 49
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e1 e3       	ldi	r30, 0x31	; 49
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	90 81       	ld	r25, Z
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	89 2b       	or	r24, r25
    1544:	8c 93       	st	X, r24
		}
		break;
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <Relay_Init>:
 *
 *      Author: SRR&MO
 */
#include "Relay_Interface.h"
void Relay_Init(void)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(RELAY_PORT,RELAY_CHANNEL,OUTPUT);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	62 e0       	ldi	r22, 0x02	; 2
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <Relay_TurnON>:
void Relay_TurnON(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(RELAY_PORT,RELAY_CHANNEL,STD_HIGH);
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	62 e0       	ldi	r22, 0x02	; 2
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <Relay_TurnOFF>:
void Relay_TurnOFF(void)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(RELAY_PORT,RELAY_CHANNEL,STD_LOW);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	62 e0       	ldi	r22, 0x02	; 2
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <Relay_Toggle>:
void Relay_Toggle(void)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(RELAY_PORT,RELAY_CHANNEL);
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	62 e0       	ldi	r22, 0x02	; 2
    15aa:	0e 94 b8 08 	call	0x1170	; 0x1170 <Dio_FlipChannel>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <Led_Init>:
 **********************************/

#include "Led_Interface.h"

void Led_Init(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT, LED0_CHANNEL, OUTPUT);
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	62 e0       	ldi	r22, 0x02	; 2
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT, LED1_CHANNEL, OUTPUT);
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	67 e0       	ldi	r22, 0x07	; 7
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT, LED2_CHANNEL, OUTPUT);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	63 e0       	ldi	r22, 0x03	; 3
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <Led_ON>:
void Led_ON(Led_ID led)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <Led_ON+0x6>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3b 83       	std	Y+3, r19	; 0x03
    15f6:	2a 83       	std	Y+2, r18	; 0x02
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	79 f0       	breq	.+30     	; 0x1620 <Led_ON+0x40>
    1602:	2a 81       	ldd	r18, Y+2	; 0x02
    1604:	3b 81       	ldd	r19, Y+3	; 0x03
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	81 f0       	breq	.+32     	; 0x162c <Led_ON+0x4c>
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	9b 81       	ldd	r25, Y+3	; 0x03
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	89 f4       	brne	.+34     	; 0x1636 <Led_ON+0x56>
	{
	case LED0:
#if (LED0_CONNECTION == FORWARD)
		Dio_WriteChannel(LED0_PORT,LED0_CHANNEL,STD_HIGH);
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	62 e0       	ldi	r22, 0x02	; 2
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
    161e:	0b c0       	rjmp	.+22     	; 0x1636 <Led_ON+0x56>
		Dio_WriteChannel(LED0_PORT,LED0_CHANNEL,STD_LOW);
#endif
		break;
	case LED1:
#if (LED1_CONNECTION == FORWARD)
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_HIGH);
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	67 e0       	ldi	r22, 0x07	; 7
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <Led_ON+0x56>
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_LOW);
#endif
		break;
	case LED2:
#if (LED2_CONNECTION == FORWARD)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_HIGH);
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	63 e0       	ldi	r22, 0x03	; 3
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
#elif (LED2_CONNECTION == REVERSE)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_LOW);
#endif
		break;
	}
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <Led_OFF>:
void Led_OFF(Led_ID led)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <Led_OFF+0x6>
    1648:	0f 92       	push	r0
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3b 83       	std	Y+3, r19	; 0x03
    1658:	2a 83       	std	Y+2, r18	; 0x02
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	9b 81       	ldd	r25, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	79 f0       	breq	.+30     	; 0x1682 <Led_OFF+0x40>
    1664:	2a 81       	ldd	r18, Y+2	; 0x02
    1666:	3b 81       	ldd	r19, Y+3	; 0x03
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <Led_OFF+0x4c>
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	89 f4       	brne	.+34     	; 0x1698 <Led_OFF+0x56>
	{
	case LED0:
#if (LED0_CONNECTION == FORWARD)
		Dio_WriteChannel(LED0_PORT,LED0_CHANNEL,STD_LOW);
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
    1680:	0b c0       	rjmp	.+22     	; 0x1698 <Led_OFF+0x56>
#endif

		break;
	case LED1:
#if (LED1_CONNECTION == FORWARD)
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_LOW);
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	67 e0       	ldi	r22, 0x07	; 7
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <Led_OFF+0x56>
		Dio_WriteChannel(LED1_PORT,LED1_CHANNEL,STD_HIGH);
#endif
		break;
	case LED2:
#if (LED2_CONNECTION == FORWARD)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_LOW);
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	63 e0       	ldi	r22, 0x03	; 3
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
#elif (LED2_CONNECTION == REVERSE)
		Dio_WriteChannel(LED2_PORT,LED2_CHANNEL,STD_HIGH);
#endif
		break;
	}
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <Led_Toggle>:
void Led_Toggle(Led_ID led)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <Led_Toggle+0x6>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	3b 83       	std	Y+3, r19	; 0x03
    16ba:	2a 83       	std	Y+2, r18	; 0x02
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	9b 81       	ldd	r25, Y+3	; 0x03
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	91 05       	cpc	r25, r1
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <Led_Toggle+0x3e>
    16c6:	2a 81       	ldd	r18, Y+2	; 0x02
    16c8:	3b 81       	ldd	r19, Y+3	; 0x03
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	71 f0       	breq	.+28     	; 0x16ec <Led_Toggle+0x48>
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	71 f4       	brne	.+28     	; 0x16f4 <Led_Toggle+0x50>
	{
	case LED0:
		Dio_FlipChannel(LED0_PORT,LED0_CHANNEL);
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	0e 94 b8 08 	call	0x1170	; 0x1170 <Dio_FlipChannel>
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <Led_Toggle+0x50>
		break;
	case LED1:
		Dio_FlipChannel(LED1_PORT,LED1_CHANNEL);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	67 e0       	ldi	r22, 0x07	; 7
    16e6:	0e 94 b8 08 	call	0x1170	; 0x1170 <Dio_FlipChannel>
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <Led_Toggle+0x50>
		break;
	case LED2:
		Dio_FlipChannel(LED2_PORT,LED2_CHANNEL);
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	63 e0       	ldi	r22, 0x03	; 3
    16f0:	0e 94 b8 08 	call	0x1170	; 0x1170 <Dio_FlipChannel>
		break;
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <Lcd_Cmd>:
#include "Std_Types.h"



volatile void Lcd_Cmd(u8 cmd)
{
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	cd 54       	subi	r28, 0x4D	; 77
    170e:	d0 40       	sbci	r29, 0x00	; 0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	fe 01       	movw	r30, r28
    171c:	e3 5b       	subi	r30, 0xB3	; 179
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 83       	st	Z, r24
	(*(volatile u8 *)(command+2)) &= ~(1<<Rs) ;         //Reset Rs pin for Write command
    1722:	a8 e3       	ldi	r26, 0x38	; 56
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e8 e3       	ldi	r30, 0x38	; 56
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8d 7f       	andi	r24, 0xFD	; 253
    172e:	8c 93       	st	X, r24


	(*(volatile u8 *)(data+2))     = cmd &0xf0 ;       //send the command high nibble to D4:D7
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	fe 01       	movw	r30, r28
    1736:	e3 5b       	subi	r30, 0xB3	; 179
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 81       	ld	r24, Z
    173c:	80 7f       	andi	r24, 0xF0	; 240
    173e:	8c 93       	st	X, r24

	(*(volatile u8 *)(command+2)) |= (1<<E) ;          //Set Enable start of high to low pulse to latch data
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	88 60       	ori	r24, 0x08	; 8
    174c:	8c 93       	st	X, r24
    174e:	fe 01       	movw	r30, r28
    1750:	e7 5b       	subi	r30, 0xB7	; 183
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 e8       	ldi	r26, 0x80	; 128
    175a:	bf e3       	ldi	r27, 0x3F	; 63
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	8e 01       	movw	r16, r28
    1766:	0b 5b       	subi	r16, 0xBB	; 187
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	fe 01       	movw	r30, r28
    176c:	e7 5b       	subi	r30, 0xB7	; 183
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	55 e4       	ldi	r21, 0x45	; 69
    1780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1792:	fe 01       	movw	r30, r28
    1794:	eb 5b       	subi	r30, 0xBB	; 187
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	44 f4       	brge	.+16     	; 0x17c0 <Lcd_Cmd+0xc0>
		__ticks = 1;
    17b0:	fe 01       	movw	r30, r28
    17b2:	ed 5b       	subi	r30, 0xBD	; 189
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
    17be:	64 c0       	rjmp	.+200    	; 0x1888 <Lcd_Cmd+0x188>
	else if (__tmp > 65535)
    17c0:	fe 01       	movw	r30, r28
    17c2:	eb 5b       	subi	r30, 0xBB	; 187
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <Lcd_Cmd+0xe0>
    17de:	43 c0       	rjmp	.+134    	; 0x1866 <Lcd_Cmd+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5b       	subi	r30, 0xB7	; 183
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8e 01       	movw	r16, r28
    1800:	0d 5b       	subi	r16, 0xBD	; 189
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	1f c0       	rjmp	.+62     	; 0x1856 <Lcd_Cmd+0x156>
    1818:	fe 01       	movw	r30, r28
    181a:	ef 5b       	subi	r30, 0xBF	; 191
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 e9       	ldi	r24, 0x90	; 144
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1826:	fe 01       	movw	r30, r28
    1828:	ef 5b       	subi	r30, 0xBF	; 191
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <Lcd_Cmd+0x130>
    1834:	fe 01       	movw	r30, r28
    1836:	ef 5b       	subi	r30, 0xBF	; 191
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	de 01       	movw	r26, r28
    1840:	ad 5b       	subi	r26, 0xBD	; 189
    1842:	bf 4f       	sbci	r27, 0xFF	; 255
    1844:	fe 01       	movw	r30, r28
    1846:	ed 5b       	subi	r30, 0xBD	; 189
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	11 96       	adiw	r26, 0x01	; 1
    1852:	9c 93       	st	X, r25
    1854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	fe 01       	movw	r30, r28
    1858:	ed 5b       	subi	r30, 0xBD	; 189
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	d1 f6       	brne	.-76     	; 0x1818 <Lcd_Cmd+0x118>
    1864:	24 c0       	rjmp	.+72     	; 0x18ae <Lcd_Cmd+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	8e 01       	movw	r16, r28
    1868:	0d 5b       	subi	r16, 0xBD	; 189
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	fe 01       	movw	r30, r28
    186e:	eb 5b       	subi	r30, 0xBB	; 187
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5b       	subi	r30, 0xBD	; 189
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	fe 01       	movw	r30, r28
    1894:	ff 96       	adiw	r30, 0x3f	; 63
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	80 83       	st	Z, r24
    189a:	fe 01       	movw	r30, r28
    189c:	ff 96       	adiw	r30, 0x3f	; 63
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <Lcd_Cmd+0x1a2>
    18a6:	fe 01       	movw	r30, r28
    18a8:	ff 96       	adiw	r30, 0x3f	; 63
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
	_delay_ms(1);
	(*(volatile u8 *)(command+2)) &= ~(1<<E) ;         //Reset Enable pin of the high to low pulse
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	87 7f       	andi	r24, 0xF7	; 247
    18ba:	8c 93       	st	X, r24
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a8 ec       	ldi	r26, 0xC8	; 200
    18c2:	b2 e4       	ldi	r27, 0x42	; 66
    18c4:	8b af       	std	Y+59, r24	; 0x3b
    18c6:	9c af       	std	Y+60, r25	; 0x3c
    18c8:	ad af       	std	Y+61, r26	; 0x3d
    18ca:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18cc:	6b ad       	ldd	r22, Y+59	; 0x3b
    18ce:	7c ad       	ldd	r23, Y+60	; 0x3c
    18d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d4:	2b ea       	ldi	r18, 0xAB	; 171
    18d6:	3a ea       	ldi	r19, 0xAA	; 170
    18d8:	4a ea       	ldi	r20, 0xAA	; 170
    18da:	50 e4       	ldi	r21, 0x40	; 64
    18dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8f ab       	std	Y+55, r24	; 0x37
    18e6:	98 af       	std	Y+56, r25	; 0x38
    18e8:	a9 af       	std	Y+57, r26	; 0x39
    18ea:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    18ec:	6f a9       	ldd	r22, Y+55	; 0x37
    18ee:	78 ad       	ldd	r23, Y+56	; 0x38
    18f0:	89 ad       	ldd	r24, Y+57	; 0x39
    18f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	1c f4       	brge	.+6      	; 0x190a <Lcd_Cmd+0x20a>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	8e ab       	std	Y+54, r24	; 0x36
    1908:	91 c0       	rjmp	.+290    	; 0x1a2c <Lcd_Cmd+0x32c>
	else if (__tmp > 255)
    190a:	6f a9       	ldd	r22, Y+55	; 0x37
    190c:	78 ad       	ldd	r23, Y+56	; 0x38
    190e:	89 ad       	ldd	r24, Y+57	; 0x39
    1910:	9a ad       	ldd	r25, Y+58	; 0x3a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	53 e4       	ldi	r21, 0x43	; 67
    191a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	0c f0       	brlt	.+2      	; 0x1924 <Lcd_Cmd+0x224>
    1922:	7b c0       	rjmp	.+246    	; 0x1a1a <Lcd_Cmd+0x31a>
	{
		_delay_ms(__us / 1000.0);
    1924:	6b ad       	ldd	r22, Y+59	; 0x3b
    1926:	7c ad       	ldd	r23, Y+60	; 0x3c
    1928:	8d ad       	ldd	r24, Y+61	; 0x3d
    192a:	9e ad       	ldd	r25, Y+62	; 0x3e
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e7       	ldi	r20, 0x7A	; 122
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8a ab       	std	Y+50, r24	; 0x32
    193e:	9b ab       	std	Y+51, r25	; 0x33
    1940:	ac ab       	std	Y+52, r26	; 0x34
    1942:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	6a a9       	ldd	r22, Y+50	; 0x32
    1946:	7b a9       	ldd	r23, Y+51	; 0x33
    1948:	8c a9       	ldd	r24, Y+52	; 0x34
    194a:	9d a9       	ldd	r25, Y+53	; 0x35
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a e7       	ldi	r20, 0x7A	; 122
    1952:	55 e4       	ldi	r21, 0x45	; 69
    1954:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8e a7       	std	Y+46, r24	; 0x2e
    195e:	9f a7       	std	Y+47, r25	; 0x2f
    1960:	a8 ab       	std	Y+48, r26	; 0x30
    1962:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1964:	6e a5       	ldd	r22, Y+46	; 0x2e
    1966:	7f a5       	ldd	r23, Y+47	; 0x2f
    1968:	88 a9       	ldd	r24, Y+48	; 0x30
    196a:	99 a9       	ldd	r25, Y+49	; 0x31
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	2c f4       	brge	.+10     	; 0x1986 <Lcd_Cmd+0x286>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9d a7       	std	Y+45, r25	; 0x2d
    1982:	8c a7       	std	Y+44, r24	; 0x2c
    1984:	3f c0       	rjmp	.+126    	; 0x1a04 <Lcd_Cmd+0x304>
	else if (__tmp > 65535)
    1986:	6e a5       	ldd	r22, Y+46	; 0x2e
    1988:	7f a5       	ldd	r23, Y+47	; 0x2f
    198a:	88 a9       	ldd	r24, Y+48	; 0x30
    198c:	99 a9       	ldd	r25, Y+49	; 0x31
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	4f e7       	ldi	r20, 0x7F	; 127
    1994:	57 e4       	ldi	r21, 0x47	; 71
    1996:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    199a:	18 16       	cp	r1, r24
    199c:	4c f5       	brge	.+82     	; 0x19f0 <Lcd_Cmd+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	6a a9       	ldd	r22, Y+50	; 0x32
    19a0:	7b a9       	ldd	r23, Y+51	; 0x33
    19a2:	8c a9       	ldd	r24, Y+52	; 0x34
    19a4:	9d a9       	ldd	r25, Y+53	; 0x35
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9d a7       	std	Y+45, r25	; 0x2d
    19c4:	8c a7       	std	Y+44, r24	; 0x2c
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <Lcd_Cmd+0x2e6>
    19c8:	80 e9       	ldi	r24, 0x90	; 144
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	9b a7       	std	Y+43, r25	; 0x2b
    19ce:	8a a7       	std	Y+42, r24	; 0x2a
    19d0:	8a a5       	ldd	r24, Y+42	; 0x2a
    19d2:	9b a5       	ldd	r25, Y+43	; 0x2b
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <Lcd_Cmd+0x2d4>
    19d8:	9b a7       	std	Y+43, r25	; 0x2b
    19da:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    19de:	9d a5       	ldd	r25, Y+45	; 0x2d
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9d a7       	std	Y+45, r25	; 0x2d
    19e4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    19e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <Lcd_Cmd+0x2c8>
    19ee:	24 c0       	rjmp	.+72     	; 0x1a38 <Lcd_Cmd+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	6e a5       	ldd	r22, Y+46	; 0x2e
    19f2:	7f a5       	ldd	r23, Y+47	; 0x2f
    19f4:	88 a9       	ldd	r24, Y+48	; 0x30
    19f6:	99 a9       	ldd	r25, Y+49	; 0x31
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9d a7       	std	Y+45, r25	; 0x2d
    1a02:	8c a7       	std	Y+44, r24	; 0x2c
    1a04:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a06:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a08:	99 a7       	std	Y+41, r25	; 0x29
    1a0a:	88 a7       	std	Y+40, r24	; 0x28
    1a0c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a0e:	99 a5       	ldd	r25, Y+41	; 0x29
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <Lcd_Cmd+0x310>
    1a14:	99 a7       	std	Y+41, r25	; 0x29
    1a16:	88 a7       	std	Y+40, r24	; 0x28
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <Lcd_Cmd+0x338>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a1a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a1c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	8e ab       	std	Y+54, r24	; 0x36
    1a2c:	8e a9       	ldd	r24, Y+54	; 0x36
    1a2e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a30:	8f a1       	ldd	r24, Y+39	; 0x27
    1a32:	8a 95       	dec	r24
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <Lcd_Cmd+0x332>
    1a36:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	(*(volatile u8 *)(data+2))=cmd<<4 ;                //send the Low nibble to D4:D7
    1a38:	ab e3       	ldi	r26, 0x3B	; 59
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e3 5b       	subi	r30, 0xB3	; 179
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	82 95       	swap	r24
    1a46:	80 7f       	andi	r24, 0xF0	; 240
    1a48:	8c 93       	st	X, r24

	(*(volatile u8 *)(command+2)) |= (1<<E) ;          //Set Enable start of high to low pulse to latch data
    1a4a:	a8 e3       	ldi	r26, 0x38	; 56
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e8 e3       	ldi	r30, 0x38	; 56
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	88 60       	ori	r24, 0x08	; 8
    1a56:	8c 93       	st	X, r24
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e8       	ldi	r26, 0x80	; 128
    1a5e:	bf e3       	ldi	r27, 0x3F	; 63
    1a60:	8b a3       	std	Y+35, r24	; 0x23
    1a62:	9c a3       	std	Y+36, r25	; 0x24
    1a64:	ad a3       	std	Y+37, r26	; 0x25
    1a66:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a e7       	ldi	r20, 0x7A	; 122
    1a76:	55 e4       	ldi	r21, 0x45	; 69
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8f 8f       	std	Y+31, r24	; 0x1f
    1a82:	98 a3       	std	Y+32, r25	; 0x20
    1a84:	a9 a3       	std	Y+33, r26	; 0x21
    1a86:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a8a:	78 a1       	ldd	r23, Y+32	; 0x20
    1a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <Lcd_Cmd+0x3aa>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa6:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <Lcd_Cmd+0x428>
	else if (__tmp > 65535)
    1aaa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aac:	78 a1       	ldd	r23, Y+32	; 0x20
    1aae:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <Lcd_Cmd+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <Lcd_Cmd+0x40a>
    1aec:	80 e9       	ldi	r24, 0x90	; 144
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	9c 8f       	std	Y+28, r25	; 0x1c
    1af2:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <Lcd_Cmd+0x3f8>
    1afc:	9c 8f       	std	Y+28, r25	; 0x1c
    1afe:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9e 8f       	std	Y+30, r25	; 0x1e
    1b08:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <Lcd_Cmd+0x3ec>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <Lcd_Cmd+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b16:	78 a1       	ldd	r23, Y+32	; 0x20
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 8f       	std	Y+30, r25	; 0x1e
    1b26:	8d 8f       	std	Y+29, r24	; 0x1d
    1b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2e:	89 8f       	std	Y+25, r24	; 0x19
    1b30:	89 8d       	ldd	r24, Y+25	; 0x19
    1b32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <Lcd_Cmd+0x434>
    1b38:	9a 8f       	std	Y+26, r25	; 0x1a
    1b3a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);
	(*(volatile u8 *)(command+2)) &= ~(1<<E) ;
    1b3c:	a8 e3       	ldi	r26, 0x38	; 56
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e8 e3       	ldi	r30, 0x38	; 56
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	87 7f       	andi	r24, 0xF7	; 247
    1b48:	8c 93       	st	X, r24
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a8 ec       	ldi	r26, 0xC8	; 200
    1b50:	b2 e4       	ldi	r27, 0x42	; 66
    1b52:	8d 8b       	std	Y+21, r24	; 0x15
    1b54:	9e 8b       	std	Y+22, r25	; 0x16
    1b56:	af 8b       	std	Y+23, r26	; 0x17
    1b58:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b60:	98 8d       	ldd	r25, Y+24	; 0x18
    1b62:	2b ea       	ldi	r18, 0xAB	; 171
    1b64:	3a ea       	ldi	r19, 0xAA	; 170
    1b66:	4a ea       	ldi	r20, 0xAA	; 170
    1b68:	50 e4       	ldi	r21, 0x40	; 64
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	89 8b       	std	Y+17, r24	; 0x11
    1b74:	9a 8b       	std	Y+18, r25	; 0x12
    1b76:	ab 8b       	std	Y+19, r26	; 0x13
    1b78:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b7a:	69 89       	ldd	r22, Y+17	; 0x11
    1b7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	1c f4       	brge	.+6      	; 0x1b98 <Lcd_Cmd+0x498>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	88 8b       	std	Y+16, r24	; 0x10
    1b96:	91 c0       	rjmp	.+290    	; 0x1cba <Lcd_Cmd+0x5ba>
	else if (__tmp > 255)
    1b98:	69 89       	ldd	r22, Y+17	; 0x11
    1b9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	53 e4       	ldi	r21, 0x43	; 67
    1ba8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	0c f0       	brlt	.+2      	; 0x1bb2 <Lcd_Cmd+0x4b2>
    1bb0:	7b c0       	rjmp	.+246    	; 0x1ca8 <Lcd_Cmd+0x5a8>
	{
		_delay_ms(__us / 1000.0);
    1bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4a e7       	ldi	r20, 0x7A	; 122
    1bc0:	54 e4       	ldi	r21, 0x44	; 68
    1bc2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	8c 87       	std	Y+12, r24	; 0x0c
    1bcc:	9d 87       	std	Y+13, r25	; 0x0d
    1bce:	ae 87       	std	Y+14, r26	; 0x0e
    1bd0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bd4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a e7       	ldi	r20, 0x7A	; 122
    1be0:	55 e4       	ldi	r21, 0x45	; 69
    1be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	88 87       	std	Y+8, r24	; 0x08
    1bec:	99 87       	std	Y+9, r25	; 0x09
    1bee:	aa 87       	std	Y+10, r26	; 0x0a
    1bf0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bf2:	68 85       	ldd	r22, Y+8	; 0x08
    1bf4:	79 85       	ldd	r23, Y+9	; 0x09
    1bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <Lcd_Cmd+0x514>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9f 83       	std	Y+7, r25	; 0x07
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	3f c0       	rjmp	.+126    	; 0x1c92 <Lcd_Cmd+0x592>
	else if (__tmp > 65535)
    1c14:	68 85       	ldd	r22, Y+8	; 0x08
    1c16:	79 85       	ldd	r23, Y+9	; 0x09
    1c18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	4c f5       	brge	.+82     	; 0x1c7e <Lcd_Cmd+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e2       	ldi	r20, 0x20	; 32
    1c3a:	51 e4       	ldi	r21, 0x41	; 65
    1c3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9f 83       	std	Y+7, r25	; 0x07
    1c52:	8e 83       	std	Y+6, r24	; 0x06
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <Lcd_Cmd+0x574>
    1c56:	80 e9       	ldi	r24, 0x90	; 144
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	9d 83       	std	Y+5, r25	; 0x05
    1c5c:	8c 83       	std	Y+4, r24	; 0x04
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <Lcd_Cmd+0x562>
    1c66:	9d 83       	std	Y+5, r25	; 0x05
    1c68:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	9f 83       	std	Y+7, r25	; 0x07
    1c72:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c74:	8e 81       	ldd	r24, Y+6	; 0x06
    1c76:	9f 81       	ldd	r25, Y+7	; 0x07
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	69 f7       	brne	.-38     	; 0x1c56 <Lcd_Cmd+0x556>
    1c7c:	24 c0       	rjmp	.+72     	; 0x1cc6 <Lcd_Cmd+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7e:	68 85       	ldd	r22, Y+8	; 0x08
    1c80:	79 85       	ldd	r23, Y+9	; 0x09
    1c82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9f 83       	std	Y+7, r25	; 0x07
    1c90:	8e 83       	std	Y+6, r24	; 0x06
    1c92:	8e 81       	ldd	r24, Y+6	; 0x06
    1c94:	9f 81       	ldd	r25, Y+7	; 0x07
    1c96:	9b 83       	std	Y+3, r25	; 0x03
    1c98:	8a 83       	std	Y+2, r24	; 0x02
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <Lcd_Cmd+0x59e>
    1ca2:	9b 83       	std	Y+3, r25	; 0x03
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <Lcd_Cmd+0x5c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ca8:	69 89       	ldd	r22, Y+17	; 0x11
    1caa:	7a 89       	ldd	r23, Y+18	; 0x12
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	88 8b       	std	Y+16, r24	; 0x10
    1cba:	88 89       	ldd	r24, Y+16	; 0x10
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	8a 95       	dec	r24
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <Lcd_Cmd+0x5c0>
    1cc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    1cc6:	c3 5b       	subi	r28, 0xB3	; 179
    1cc8:	df 4f       	sbci	r29, 0xFF	; 255
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <Lcd_Init>:

volatile void Lcd_Init()
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	68 97       	sbiw	r28, 0x18	; 24
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
	(*(volatile u8 *)(data+1))=0XFF;                     // Set the data port as O/P
    1cf2:	ea e3       	ldi	r30, 0x3A	; 58
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	80 83       	st	Z, r24

	(*(volatile u8 *)(command +1))=0XFF;                 // Set the command port as O/P
    1cfa:	e7 e3       	ldi	r30, 0x37	; 55
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	80 83       	st	Z, r24

	(*(volatile u8 *)(data+2))=0X00;                     // Initialize data port
    1d02:	eb e3       	ldi	r30, 0x3B	; 59
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	10 82       	st	Z, r1

	(*(volatile u8 *)(command+2))&= ~(1<<E);            //Reset Enable pin
    1d08:	a8 e3       	ldi	r26, 0x38	; 56
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e8 e3       	ldi	r30, 0x38	; 56
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	87 7f       	andi	r24, 0xF7	; 247
    1d14:	8c 93       	st	X, r24


	Lcd_Cmd(0x33);                 // Set 8-bit mode
    1d16:	83 e3       	ldi	r24, 0x33	; 51
    1d18:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
	Lcd_Cmd(0x32);                 // Set 8-bit mode again (as indicated in the LCD data sheet)
    1d1c:	82 e3       	ldi	r24, 0x32	; 50
    1d1e:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
	Lcd_Cmd(0x28);                 // 4-bit mode operation
    1d22:	88 e2       	ldi	r24, 0x28	; 40
    1d24:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
	Lcd_Cmd(0x0e);                 // Cursor Underline
    1d28:	8e e0       	ldi	r24, 0x0E	; 14
    1d2a:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
	Lcd_Cmd(0x01);                 // Clear screen
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	aa ef       	ldi	r26, 0xFA	; 250
    1d3a:	b4 e4       	ldi	r27, 0x44	; 68
    1d3c:	8d 8b       	std	Y+21, r24	; 0x15
    1d3e:	9e 8b       	std	Y+22, r25	; 0x16
    1d40:	af 8b       	std	Y+23, r26	; 0x17
    1d42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d44:	6d 89       	ldd	r22, Y+21	; 0x15
    1d46:	7e 89       	ldd	r23, Y+22	; 0x16
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	2b ea       	ldi	r18, 0xAB	; 171
    1d4e:	3a ea       	ldi	r19, 0xAA	; 170
    1d50:	4a ea       	ldi	r20, 0xAA	; 170
    1d52:	50 e4       	ldi	r21, 0x40	; 64
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
    1d5e:	9a 8b       	std	Y+18, r25	; 0x12
    1d60:	ab 8b       	std	Y+19, r26	; 0x13
    1d62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d64:	69 89       	ldd	r22, Y+17	; 0x11
    1d66:	7a 89       	ldd	r23, Y+18	; 0x12
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	1c f4       	brge	.+6      	; 0x1d82 <Lcd_Init+0xa4>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	88 8b       	std	Y+16, r24	; 0x10
    1d80:	91 c0       	rjmp	.+290    	; 0x1ea4 <Lcd_Init+0x1c6>
	else if (__tmp > 255)
    1d82:	69 89       	ldd	r22, Y+17	; 0x11
    1d84:	7a 89       	ldd	r23, Y+18	; 0x12
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	0c f0       	brlt	.+2      	; 0x1d9c <Lcd_Init+0xbe>
    1d9a:	7b c0       	rjmp	.+246    	; 0x1e92 <Lcd_Init+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a e7       	ldi	r20, 0x7A	; 122
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8c 87       	std	Y+12, r24	; 0x0c
    1db6:	9d 87       	std	Y+13, r25	; 0x0d
    1db8:	ae 87       	std	Y+14, r26	; 0x0e
    1dba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a e7       	ldi	r20, 0x7A	; 122
    1dca:	55 e4       	ldi	r21, 0x45	; 69
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	88 87       	std	Y+8, r24	; 0x08
    1dd6:	99 87       	std	Y+9, r25	; 0x09
    1dd8:	aa 87       	std	Y+10, r26	; 0x0a
    1dda:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ddc:	68 85       	ldd	r22, Y+8	; 0x08
    1dde:	79 85       	ldd	r23, Y+9	; 0x09
    1de0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <Lcd_Init+0x120>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9f 83       	std	Y+7, r25	; 0x07
    1dfa:	8e 83       	std	Y+6, r24	; 0x06
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <Lcd_Init+0x19e>
	else if (__tmp > 65535)
    1dfe:	68 85       	ldd	r22, Y+8	; 0x08
    1e00:	79 85       	ldd	r23, Y+9	; 0x09
    1e02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <Lcd_Init+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e18:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9f 83       	std	Y+7, r25	; 0x07
    1e3c:	8e 83       	std	Y+6, r24	; 0x06
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <Lcd_Init+0x180>
    1e40:	80 e9       	ldi	r24, 0x90	; 144
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	9d 83       	std	Y+5, r25	; 0x05
    1e46:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <Lcd_Init+0x16e>
    1e50:	9d 83       	std	Y+5, r25	; 0x05
    1e52:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8e 81       	ldd	r24, Y+6	; 0x06
    1e56:	9f 81       	ldd	r25, Y+7	; 0x07
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9f 83       	std	Y+7, r25	; 0x07
    1e5c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e60:	9f 81       	ldd	r25, Y+7	; 0x07
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <Lcd_Init+0x162>
    1e66:	24 c0       	rjmp	.+72     	; 0x1eb0 <Lcd_Init+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	68 85       	ldd	r22, Y+8	; 0x08
    1e6a:	79 85       	ldd	r23, Y+9	; 0x09
    1e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9f 83       	std	Y+7, r25	; 0x07
    1e7a:	8e 83       	std	Y+6, r24	; 0x06
    1e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <Lcd_Init+0x1aa>
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <Lcd_Init+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e92:	69 89       	ldd	r22, Y+17	; 0x11
    1e94:	7a 89       	ldd	r23, Y+18	; 0x12
    1e96:	8b 89       	ldd	r24, Y+19	; 0x13
    1e98:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	88 8b       	std	Y+16, r24	; 0x10
    1ea4:	88 89       	ldd	r24, Y+16	; 0x10
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	8a 95       	dec	r24
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <Lcd_Init+0x1cc>
    1eae:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	Lcd_Cmd(0x06);                 //Cursor Increment
    1eb0:	86 e0       	ldi	r24, 0x06	; 6
    1eb2:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
}
    1eb6:	68 96       	adiw	r28, 0x18	; 24
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <Lcd_DisplayChr>:


volatile void Lcd_DisplayChr(u8 chr)
{
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	c1 56       	subi	r28, 0x61	; 97
    1ed6:	d0 40       	sbci	r29, 0x00	; 0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ef 59       	subi	r30, 0x9F	; 159
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 83       	st	Z, r24
	(*(volatile u8 *)(command+2)) |=(1<<Rs) ;          // Set Rs pin for Data write
    1eea:	a8 e3       	ldi	r26, 0x38	; 56
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e8 e3       	ldi	r30, 0x38	; 56
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	8c 93       	st	X, r24
	(*(volatile u8 *)(data+2))=chr&0xf0 ;
    1ef8:	ab e3       	ldi	r26, 0x3B	; 59
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	fe 01       	movw	r30, r28
    1efe:	ef 59       	subi	r30, 0x9F	; 159
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	80 7f       	andi	r24, 0xF0	; 240
    1f06:	8c 93       	st	X, r24
	(*(volatile u8 *)(command+2)) |=(1<<Rs) ;         // Set Rs pin for Data write
    1f08:	a8 e3       	ldi	r26, 0x38	; 56
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e8 e3       	ldi	r30, 0x38	; 56
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	82 60       	ori	r24, 0x02	; 2
    1f14:	8c 93       	st	X, r24
	(*(volatile u8 *)(command+2))|=(1<<E) ;           // Set Enable start of high to low pulse to latch data
    1f16:	a8 e3       	ldi	r26, 0x38	; 56
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e8 e3       	ldi	r30, 0x38	; 56
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 60       	ori	r24, 0x08	; 8
    1f22:	8c 93       	st	X, r24
    1f24:	fe 01       	movw	r30, r28
    1f26:	e3 5a       	subi	r30, 0xA3	; 163
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a0 e8       	ldi	r26, 0x80	; 128
    1f30:	bf e3       	ldi	r27, 0x3F	; 63
    1f32:	80 83       	st	Z, r24
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	a2 83       	std	Z+2, r26	; 0x02
    1f38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f3a:	8e 01       	movw	r16, r28
    1f3c:	07 5a       	subi	r16, 0xA7	; 167
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	fe 01       	movw	r30, r28
    1f42:	e3 5a       	subi	r30, 0xA3	; 163
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	2b ea       	ldi	r18, 0xAB	; 171
    1f50:	3a ea       	ldi	r19, 0xAA	; 170
    1f52:	4a ea       	ldi	r20, 0xAA	; 170
    1f54:	50 e4       	ldi	r21, 0x40	; 64
    1f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	f8 01       	movw	r30, r16
    1f60:	80 83       	st	Z, r24
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	a2 83       	std	Z+2, r26	; 0x02
    1f66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e7 5a       	subi	r30, 0xA7	; 167
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	34 f4       	brge	.+12     	; 0x1f92 <Lcd_DisplayChr+0xca>
		__ticks = 1;
    1f86:	fe 01       	movw	r30, r28
    1f88:	e8 5a       	subi	r30, 0xA8	; 168
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	80 83       	st	Z, r24
    1f90:	e0 c0       	rjmp	.+448    	; 0x2152 <Lcd_DisplayChr+0x28a>
	else if (__tmp > 255)
    1f92:	fe 01       	movw	r30, r28
    1f94:	e7 5a       	subi	r30, 0xA7	; 167
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	53 e4       	ldi	r21, 0x43	; 67
    1fa8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	0c f0       	brlt	.+2      	; 0x1fb2 <Lcd_DisplayChr+0xea>
    1fb0:	c0 c0       	rjmp	.+384    	; 0x2132 <Lcd_DisplayChr+0x26a>
	{
		_delay_ms(__us / 1000.0);
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e3 5a       	subi	r30, 0xA3	; 163
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a e7       	ldi	r20, 0x7A	; 122
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ec 5a       	subi	r30, 0xAC	; 172
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 83       	st	Z, r24
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	a2 83       	std	Z+2, r26	; 0x02
    1fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	8e 01       	movw	r16, r28
    1fe0:	00 5b       	subi	r16, 0xB0	; 176
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ec 5a       	subi	r30, 0xAC	; 172
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a e7       	ldi	r20, 0x7A	; 122
    1ff8:	55 e4       	ldi	r21, 0x45	; 69
    1ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	80 83       	st	Z, r24
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	a2 83       	std	Z+2, r26	; 0x02
    200a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200c:	fe 01       	movw	r30, r28
    200e:	e0 5b       	subi	r30, 0xB0	; 176
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	44 f4       	brge	.+16     	; 0x203a <Lcd_DisplayChr+0x172>
		__ticks = 1;
    202a:	fe 01       	movw	r30, r28
    202c:	e2 5b       	subi	r30, 0xB2	; 178
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	64 c0       	rjmp	.+200    	; 0x2102 <Lcd_DisplayChr+0x23a>
	else if (__tmp > 65535)
    203a:	fe 01       	movw	r30, r28
    203c:	e0 5b       	subi	r30, 0xB0	; 176
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	0c f0       	brlt	.+2      	; 0x205a <Lcd_DisplayChr+0x192>
    2058:	43 c0       	rjmp	.+134    	; 0x20e0 <Lcd_DisplayChr+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	fe 01       	movw	r30, r28
    205c:	ec 5a       	subi	r30, 0xAC	; 172
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8e 01       	movw	r16, r28
    207a:	02 5b       	subi	r16, 0xB2	; 178
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	f8 01       	movw	r30, r16
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	1f c0       	rjmp	.+62     	; 0x20d0 <Lcd_DisplayChr+0x208>
    2092:	fe 01       	movw	r30, r28
    2094:	e4 5b       	subi	r30, 0xB4	; 180
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 e9       	ldi	r24, 0x90	; 144
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20a0:	fe 01       	movw	r30, r28
    20a2:	e4 5b       	subi	r30, 0xB4	; 180
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <Lcd_DisplayChr+0x1e2>
    20ae:	fe 01       	movw	r30, r28
    20b0:	e4 5b       	subi	r30, 0xB4	; 180
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	de 01       	movw	r26, r28
    20ba:	a2 5b       	subi	r26, 0xB2	; 178
    20bc:	bf 4f       	sbci	r27, 0xFF	; 255
    20be:	fe 01       	movw	r30, r28
    20c0:	e2 5b       	subi	r30, 0xB2	; 178
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	fe 01       	movw	r30, r28
    20d2:	e2 5b       	subi	r30, 0xB2	; 178
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	d1 f6       	brne	.-76     	; 0x2092 <Lcd_DisplayChr+0x1ca>
    20de:	4b c0       	rjmp	.+150    	; 0x2176 <Lcd_DisplayChr+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	8e 01       	movw	r16, r28
    20e2:	02 5b       	subi	r16, 0xB2	; 178
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	e0 5b       	subi	r30, 0xB0	; 176
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	f8 01       	movw	r30, r16
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	de 01       	movw	r26, r28
    2104:	a6 5b       	subi	r26, 0xB6	; 182
    2106:	bf 4f       	sbci	r27, 0xFF	; 255
    2108:	fe 01       	movw	r30, r28
    210a:	e2 5b       	subi	r30, 0xB2	; 178
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	9c 93       	st	X, r25
    2116:	8e 93       	st	-X, r24
    2118:	fe 01       	movw	r30, r28
    211a:	e6 5b       	subi	r30, 0xB6	; 182
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <Lcd_DisplayChr+0x25a>
    2126:	fe 01       	movw	r30, r28
    2128:	e6 5b       	subi	r30, 0xB6	; 182
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	22 c0       	rjmp	.+68     	; 0x2176 <Lcd_DisplayChr+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2132:	8e 01       	movw	r16, r28
    2134:	08 5a       	subi	r16, 0xA8	; 168
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	e7 5a       	subi	r30, 0xA7	; 167
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	f8 01       	movw	r30, r16
    2150:	80 83       	st	Z, r24
    2152:	de 01       	movw	r26, r28
    2154:	a7 5b       	subi	r26, 0xB7	; 183
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e8 5a       	subi	r30, 0xA8	; 168
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2162:	fe 01       	movw	r30, r28
    2164:	e7 5b       	subi	r30, 0xB7	; 183
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	8a 95       	dec	r24
    216c:	f1 f7       	brne	.-4      	; 0x216a <Lcd_DisplayChr+0x2a2>
    216e:	fe 01       	movw	r30, r28
    2170:	e7 5b       	subi	r30, 0xB7	; 183
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 83       	st	Z, r24
	_delay_us(1);
	(*(volatile u8 *)(command+2))&=~(1<<E) ;         //  Reset Enable End of the high to low pulse
    2176:	a8 e3       	ldi	r26, 0x38	; 56
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e8 e3       	ldi	r30, 0x38	; 56
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	87 7f       	andi	r24, 0xF7	; 247
    2182:	8c 93       	st	X, r24
    2184:	fe 01       	movw	r30, r28
    2186:	eb 5b       	subi	r30, 0xBB	; 187
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a8 ec       	ldi	r26, 0xC8	; 200
    2190:	b2 e4       	ldi	r27, 0x42	; 66
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	a2 83       	std	Z+2, r26	; 0x02
    2198:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    219a:	8e 01       	movw	r16, r28
    219c:	0f 5b       	subi	r16, 0xBF	; 191
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	eb 5b       	subi	r30, 0xBB	; 187
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	2b ea       	ldi	r18, 0xAB	; 171
    21b0:	3a ea       	ldi	r19, 0xAA	; 170
    21b2:	4a ea       	ldi	r20, 0xAA	; 170
    21b4:	50 e4       	ldi	r21, 0x40	; 64
    21b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	80 83       	st	Z, r24
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	a2 83       	std	Z+2, r26	; 0x02
    21c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c8:	fe 01       	movw	r30, r28
    21ca:	ef 5b       	subi	r30, 0xBF	; 191
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	34 f4       	brge	.+12     	; 0x21f2 <Lcd_DisplayChr+0x32a>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	fe 01       	movw	r30, r28
    21ea:	e0 5c       	subi	r30, 0xC0	; 192
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 83       	st	Z, r24
    21f0:	9d c0       	rjmp	.+314    	; 0x232c <Lcd_DisplayChr+0x464>
	else if (__tmp > 255)
    21f2:	fe 01       	movw	r30, r28
    21f4:	ef 5b       	subi	r30, 0xBF	; 191
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	53 e4       	ldi	r21, 0x43	; 67
    2208:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	0c f0       	brlt	.+2      	; 0x2212 <Lcd_DisplayChr+0x34a>
    2210:	7e c0       	rjmp	.+252    	; 0x230e <Lcd_DisplayChr+0x446>
	{
		_delay_ms(__us / 1000.0);
    2212:	fe 01       	movw	r30, r28
    2214:	eb 5b       	subi	r30, 0xBB	; 187
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	54 e4       	ldi	r21, 0x44	; 68
    2228:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8c af       	std	Y+60, r24	; 0x3c
    2232:	9d af       	std	Y+61, r25	; 0x3d
    2234:	ae af       	std	Y+62, r26	; 0x3e
    2236:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6c ad       	ldd	r22, Y+60	; 0x3c
    223a:	7d ad       	ldd	r23, Y+61	; 0x3d
    223c:	8e ad       	ldd	r24, Y+62	; 0x3e
    223e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a e7       	ldi	r20, 0x7A	; 122
    2246:	55 e4       	ldi	r21, 0x45	; 69
    2248:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	88 af       	std	Y+56, r24	; 0x38
    2252:	99 af       	std	Y+57, r25	; 0x39
    2254:	aa af       	std	Y+58, r26	; 0x3a
    2256:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2258:	68 ad       	ldd	r22, Y+56	; 0x38
    225a:	79 ad       	ldd	r23, Y+57	; 0x39
    225c:	8a ad       	ldd	r24, Y+58	; 0x3a
    225e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <Lcd_DisplayChr+0x3b2>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9f ab       	std	Y+55, r25	; 0x37
    2276:	8e ab       	std	Y+54, r24	; 0x36
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <Lcd_DisplayChr+0x430>
	else if (__tmp > 65535)
    227a:	68 ad       	ldd	r22, Y+56	; 0x38
    227c:	79 ad       	ldd	r23, Y+57	; 0x39
    227e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2280:	9b ad       	ldd	r25, Y+59	; 0x3b
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <Lcd_DisplayChr+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6c ad       	ldd	r22, Y+60	; 0x3c
    2294:	7d ad       	ldd	r23, Y+61	; 0x3d
    2296:	8e ad       	ldd	r24, Y+62	; 0x3e
    2298:	9f ad       	ldd	r25, Y+63	; 0x3f
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9f ab       	std	Y+55, r25	; 0x37
    22b8:	8e ab       	std	Y+54, r24	; 0x36
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <Lcd_DisplayChr+0x412>
    22bc:	80 e9       	ldi	r24, 0x90	; 144
    22be:	91 e0       	ldi	r25, 0x01	; 1
    22c0:	9d ab       	std	Y+53, r25	; 0x35
    22c2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22c4:	8c a9       	ldd	r24, Y+52	; 0x34
    22c6:	9d a9       	ldd	r25, Y+53	; 0x35
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <Lcd_DisplayChr+0x400>
    22cc:	9d ab       	std	Y+53, r25	; 0x35
    22ce:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8e a9       	ldd	r24, Y+54	; 0x36
    22d2:	9f a9       	ldd	r25, Y+55	; 0x37
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9f ab       	std	Y+55, r25	; 0x37
    22d8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8e a9       	ldd	r24, Y+54	; 0x36
    22dc:	9f a9       	ldd	r25, Y+55	; 0x37
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <Lcd_DisplayChr+0x3f4>
    22e2:	2d c0       	rjmp	.+90     	; 0x233e <Lcd_DisplayChr+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	68 ad       	ldd	r22, Y+56	; 0x38
    22e6:	79 ad       	ldd	r23, Y+57	; 0x39
    22e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    22ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9f ab       	std	Y+55, r25	; 0x37
    22f6:	8e ab       	std	Y+54, r24	; 0x36
    22f8:	8e a9       	ldd	r24, Y+54	; 0x36
    22fa:	9f a9       	ldd	r25, Y+55	; 0x37
    22fc:	9b ab       	std	Y+51, r25	; 0x33
    22fe:	8a ab       	std	Y+50, r24	; 0x32
    2300:	8a a9       	ldd	r24, Y+50	; 0x32
    2302:	9b a9       	ldd	r25, Y+51	; 0x33
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <Lcd_DisplayChr+0x43c>
    2308:	9b ab       	std	Y+51, r25	; 0x33
    230a:	8a ab       	std	Y+50, r24	; 0x32
    230c:	18 c0       	rjmp	.+48     	; 0x233e <Lcd_DisplayChr+0x476>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    230e:	fe 01       	movw	r30, r28
    2310:	ef 5b       	subi	r30, 0xBF	; 191
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	fe 01       	movw	r30, r28
    2326:	e0 5c       	subi	r30, 0xC0	; 192
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 83       	st	Z, r24
    232c:	fe 01       	movw	r30, r28
    232e:	e0 5c       	subi	r30, 0xC0	; 192
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 81       	ld	r24, Z
    2334:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2336:	89 a9       	ldd	r24, Y+49	; 0x31
    2338:	8a 95       	dec	r24
    233a:	f1 f7       	brne	.-4      	; 0x2338 <Lcd_DisplayChr+0x470>
    233c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	(*(volatile u8 *)(data+2))=chr<<4 ;
    233e:	ab e3       	ldi	r26, 0x3B	; 59
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	fe 01       	movw	r30, r28
    2344:	ef 59       	subi	r30, 0x9F	; 159
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	82 95       	swap	r24
    234c:	80 7f       	andi	r24, 0xF0	; 240
    234e:	8c 93       	st	X, r24


	(*(volatile u8 *)(command+2))|=(1<<E) ;          //Set Enable start of high to low pulse to latch data
    2350:	a8 e3       	ldi	r26, 0x38	; 56
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e8 e3       	ldi	r30, 0x38	; 56
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	88 60       	ori	r24, 0x08	; 8
    235c:	8c 93       	st	X, r24
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e8       	ldi	r26, 0x80	; 128
    2364:	bf e3       	ldi	r27, 0x3F	; 63
    2366:	8d a7       	std	Y+45, r24	; 0x2d
    2368:	9e a7       	std	Y+46, r25	; 0x2e
    236a:	af a7       	std	Y+47, r26	; 0x2f
    236c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    236e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2370:	7e a5       	ldd	r23, Y+46	; 0x2e
    2372:	8f a5       	ldd	r24, Y+47	; 0x2f
    2374:	98 a9       	ldd	r25, Y+48	; 0x30
    2376:	2b ea       	ldi	r18, 0xAB	; 171
    2378:	3a ea       	ldi	r19, 0xAA	; 170
    237a:	4a ea       	ldi	r20, 0xAA	; 170
    237c:	50 e4       	ldi	r21, 0x40	; 64
    237e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	89 a7       	std	Y+41, r24	; 0x29
    2388:	9a a7       	std	Y+42, r25	; 0x2a
    238a:	ab a7       	std	Y+43, r26	; 0x2b
    238c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    238e:	69 a5       	ldd	r22, Y+41	; 0x29
    2390:	7a a5       	ldd	r23, Y+42	; 0x2a
    2392:	8b a5       	ldd	r24, Y+43	; 0x2b
    2394:	9c a5       	ldd	r25, Y+44	; 0x2c
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	1c f4       	brge	.+6      	; 0x23ac <Lcd_DisplayChr+0x4e4>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	88 a7       	std	Y+40, r24	; 0x28
    23aa:	91 c0       	rjmp	.+290    	; 0x24ce <Lcd_DisplayChr+0x606>
	else if (__tmp > 255)
    23ac:	69 a5       	ldd	r22, Y+41	; 0x29
    23ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    23b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <Lcd_DisplayChr+0x4fe>
    23c4:	7b c0       	rjmp	.+246    	; 0x24bc <Lcd_DisplayChr+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    23c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    23c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    23ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    23cc:	98 a9       	ldd	r25, Y+48	; 0x30
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a e7       	ldi	r20, 0x7A	; 122
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8c a3       	std	Y+36, r24	; 0x24
    23e0:	9d a3       	std	Y+37, r25	; 0x25
    23e2:	ae a3       	std	Y+38, r26	; 0x26
    23e4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	6c a1       	ldd	r22, Y+36	; 0x24
    23e8:	7d a1       	ldd	r23, Y+37	; 0x25
    23ea:	8e a1       	ldd	r24, Y+38	; 0x26
    23ec:	9f a1       	ldd	r25, Y+39	; 0x27
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a e7       	ldi	r20, 0x7A	; 122
    23f4:	55 e4       	ldi	r21, 0x45	; 69
    23f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	88 a3       	std	Y+32, r24	; 0x20
    2400:	99 a3       	std	Y+33, r25	; 0x21
    2402:	aa a3       	std	Y+34, r26	; 0x22
    2404:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2406:	68 a1       	ldd	r22, Y+32	; 0x20
    2408:	79 a1       	ldd	r23, Y+33	; 0x21
    240a:	8a a1       	ldd	r24, Y+34	; 0x22
    240c:	9b a1       	ldd	r25, Y+35	; 0x23
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	2c f4       	brge	.+10     	; 0x2428 <Lcd_DisplayChr+0x560>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9f 8f       	std	Y+31, r25	; 0x1f
    2424:	8e 8f       	std	Y+30, r24	; 0x1e
    2426:	3f c0       	rjmp	.+126    	; 0x24a6 <Lcd_DisplayChr+0x5de>
	else if (__tmp > 65535)
    2428:	68 a1       	ldd	r22, Y+32	; 0x20
    242a:	79 a1       	ldd	r23, Y+33	; 0x21
    242c:	8a a1       	ldd	r24, Y+34	; 0x22
    242e:	9b a1       	ldd	r25, Y+35	; 0x23
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	4c f5       	brge	.+82     	; 0x2492 <Lcd_DisplayChr+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2440:	6c a1       	ldd	r22, Y+36	; 0x24
    2442:	7d a1       	ldd	r23, Y+37	; 0x25
    2444:	8e a1       	ldd	r24, Y+38	; 0x26
    2446:	9f a1       	ldd	r25, Y+39	; 0x27
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9f 8f       	std	Y+31, r25	; 0x1f
    2466:	8e 8f       	std	Y+30, r24	; 0x1e
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <Lcd_DisplayChr+0x5c0>
    246a:	80 e9       	ldi	r24, 0x90	; 144
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	9d 8f       	std	Y+29, r25	; 0x1d
    2470:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2472:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2474:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <Lcd_DisplayChr+0x5ae>
    247a:	9d 8f       	std	Y+29, r25	; 0x1d
    247c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2480:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	9f 8f       	std	Y+31, r25	; 0x1f
    2486:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	8e 8d       	ldd	r24, Y+30	; 0x1e
    248a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f7       	brne	.-38     	; 0x246a <Lcd_DisplayChr+0x5a2>
    2490:	24 c0       	rjmp	.+72     	; 0x24da <Lcd_DisplayChr+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2492:	68 a1       	ldd	r22, Y+32	; 0x20
    2494:	79 a1       	ldd	r23, Y+33	; 0x21
    2496:	8a a1       	ldd	r24, Y+34	; 0x22
    2498:	9b a1       	ldd	r25, Y+35	; 0x23
    249a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9f 8f       	std	Y+31, r25	; 0x1f
    24a4:	8e 8f       	std	Y+30, r24	; 0x1e
    24a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24aa:	9b 8f       	std	Y+27, r25	; 0x1b
    24ac:	8a 8f       	std	Y+26, r24	; 0x1a
    24ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <Lcd_DisplayChr+0x5ea>
    24b6:	9b 8f       	std	Y+27, r25	; 0x1b
    24b8:	8a 8f       	std	Y+26, r24	; 0x1a
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <Lcd_DisplayChr+0x612>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24bc:	69 a5       	ldd	r22, Y+41	; 0x29
    24be:	7a a5       	ldd	r23, Y+42	; 0x2a
    24c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	88 a7       	std	Y+40, r24	; 0x28
    24ce:	88 a5       	ldd	r24, Y+40	; 0x28
    24d0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24d2:	89 8d       	ldd	r24, Y+25	; 0x19
    24d4:	8a 95       	dec	r24
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <Lcd_DisplayChr+0x60c>
    24d8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	(*(volatile u8 *)(command+2))&=~(1<<E) ;         //Reset Enable End of the high to low pulse
    24da:	a8 e3       	ldi	r26, 0x38	; 56
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e8 e3       	ldi	r30, 0x38	; 56
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	87 7f       	andi	r24, 0xF7	; 247
    24e6:	8c 93       	st	X, r24
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a8 ec       	ldi	r26, 0xC8	; 200
    24ee:	b2 e4       	ldi	r27, 0x42	; 66
    24f0:	8d 8b       	std	Y+21, r24	; 0x15
    24f2:	9e 8b       	std	Y+22, r25	; 0x16
    24f4:	af 8b       	std	Y+23, r26	; 0x17
    24f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	2b ea       	ldi	r18, 0xAB	; 171
    2502:	3a ea       	ldi	r19, 0xAA	; 170
    2504:	4a ea       	ldi	r20, 0xAA	; 170
    2506:	50 e4       	ldi	r21, 0x40	; 64
    2508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	89 8b       	std	Y+17, r24	; 0x11
    2512:	9a 8b       	std	Y+18, r25	; 0x12
    2514:	ab 8b       	std	Y+19, r26	; 0x13
    2516:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2518:	69 89       	ldd	r22, Y+17	; 0x11
    251a:	7a 89       	ldd	r23, Y+18	; 0x12
    251c:	8b 89       	ldd	r24, Y+19	; 0x13
    251e:	9c 89       	ldd	r25, Y+20	; 0x14
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	1c f4       	brge	.+6      	; 0x2536 <Lcd_DisplayChr+0x66e>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	88 8b       	std	Y+16, r24	; 0x10
    2534:	91 c0       	rjmp	.+290    	; 0x2658 <Lcd_DisplayChr+0x790>
	else if (__tmp > 255)
    2536:	69 89       	ldd	r22, Y+17	; 0x11
    2538:	7a 89       	ldd	r23, Y+18	; 0x12
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	53 e4       	ldi	r21, 0x43	; 67
    2546:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	0c f0       	brlt	.+2      	; 0x2550 <Lcd_DisplayChr+0x688>
    254e:	7b c0       	rjmp	.+246    	; 0x2646 <Lcd_DisplayChr+0x77e>
	{
		_delay_ms(__us / 1000.0);
    2550:	6d 89       	ldd	r22, Y+21	; 0x15
    2552:	7e 89       	ldd	r23, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	54 e4       	ldi	r21, 0x44	; 68
    2560:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8c 87       	std	Y+12, r24	; 0x0c
    256a:	9d 87       	std	Y+13, r25	; 0x0d
    256c:	ae 87       	std	Y+14, r26	; 0x0e
    256e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	6c 85       	ldd	r22, Y+12	; 0x0c
    2572:	7d 85       	ldd	r23, Y+13	; 0x0d
    2574:	8e 85       	ldd	r24, Y+14	; 0x0e
    2576:	9f 85       	ldd	r25, Y+15	; 0x0f
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	55 e4       	ldi	r21, 0x45	; 69
    2580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	88 87       	std	Y+8, r24	; 0x08
    258a:	99 87       	std	Y+9, r25	; 0x09
    258c:	aa 87       	std	Y+10, r26	; 0x0a
    258e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2590:	68 85       	ldd	r22, Y+8	; 0x08
    2592:	79 85       	ldd	r23, Y+9	; 0x09
    2594:	8a 85       	ldd	r24, Y+10	; 0x0a
    2596:	9b 85       	ldd	r25, Y+11	; 0x0b
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <Lcd_DisplayChr+0x6ea>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9f 83       	std	Y+7, r25	; 0x07
    25ae:	8e 83       	std	Y+6, r24	; 0x06
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <Lcd_DisplayChr+0x768>
	else if (__tmp > 65535)
    25b2:	68 85       	ldd	r22, Y+8	; 0x08
    25b4:	79 85       	ldd	r23, Y+9	; 0x09
    25b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <Lcd_DisplayChr+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    25cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9f 83       	std	Y+7, r25	; 0x07
    25f0:	8e 83       	std	Y+6, r24	; 0x06
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <Lcd_DisplayChr+0x74a>
    25f4:	80 e9       	ldi	r24, 0x90	; 144
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	9d 83       	std	Y+5, r25	; 0x05
    25fa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25fc:	8c 81       	ldd	r24, Y+4	; 0x04
    25fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <Lcd_DisplayChr+0x738>
    2604:	9d 83       	std	Y+5, r25	; 0x05
    2606:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8e 81       	ldd	r24, Y+6	; 0x06
    260a:	9f 81       	ldd	r25, Y+7	; 0x07
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9f 83       	std	Y+7, r25	; 0x07
    2610:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8e 81       	ldd	r24, Y+6	; 0x06
    2614:	9f 81       	ldd	r25, Y+7	; 0x07
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <Lcd_DisplayChr+0x72c>
    261a:	24 c0       	rjmp	.+72     	; 0x2664 <Lcd_DisplayChr+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	68 85       	ldd	r22, Y+8	; 0x08
    261e:	79 85       	ldd	r23, Y+9	; 0x09
    2620:	8a 85       	ldd	r24, Y+10	; 0x0a
    2622:	9b 85       	ldd	r25, Y+11	; 0x0b
    2624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9f 83       	std	Y+7, r25	; 0x07
    262e:	8e 83       	std	Y+6, r24	; 0x06
    2630:	8e 81       	ldd	r24, Y+6	; 0x06
    2632:	9f 81       	ldd	r25, Y+7	; 0x07
    2634:	9b 83       	std	Y+3, r25	; 0x03
    2636:	8a 83       	std	Y+2, r24	; 0x02
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <Lcd_DisplayChr+0x774>
    2640:	9b 83       	std	Y+3, r25	; 0x03
    2642:	8a 83       	std	Y+2, r24	; 0x02
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <Lcd_DisplayChr+0x79c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2646:	69 89       	ldd	r22, Y+17	; 0x11
    2648:	7a 89       	ldd	r23, Y+18	; 0x12
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	88 8b       	std	Y+16, r24	; 0x10
    2658:	88 89       	ldd	r24, Y+16	; 0x10
    265a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	8a 95       	dec	r24
    2660:	f1 f7       	brne	.-4      	; 0x265e <Lcd_DisplayChr+0x796>
    2662:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);

}
    2664:	cf 59       	subi	r28, 0x9F	; 159
    2666:	df 4f       	sbci	r29, 0xFF	; 255
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <Lcd_DisplayStr>:

volatile void Lcd_DisplayStr(u8* str)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <Lcd_DisplayStr+0x6>
    2682:	0f 92       	push	r0
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	9b 83       	std	Y+3, r25	; 0x03
    268a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0 ;
    268c:	19 82       	std	Y+1, r1	; 0x01
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <Lcd_DisplayStr+0x30>
	while(str[i]!=0){Lcd_DisplayChr(str[i]) ; i++;}
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	fc 01       	movw	r30, r24
    269c:	e2 0f       	add	r30, r18
    269e:	f3 1f       	adc	r31, r19
    26a0:	80 81       	ld	r24, Z
    26a2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <Lcd_DisplayChr>
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	fc 01       	movw	r30, r24
    26b8:	e2 0f       	add	r30, r18
    26ba:	f3 1f       	adc	r31, r19
    26bc:	80 81       	ld	r24, Z
    26be:	88 23       	and	r24, r24
    26c0:	39 f7       	brne	.-50     	; 0x2690 <Lcd_DisplayStr+0x14>

}
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <Lcd_Cursor_OFF>:

volatile void Lcd_Cursor_OFF()						// Disable cursor printing
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
	Lcd_Cmd(0x0c);
    26d6:	8c e0       	ldi	r24, 0x0C	; 12
    26d8:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
}
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <Lcd_Clear>:

volatile void Lcd_Clear()							// Clear screen
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
	Lcd_Cmd(0x01);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
}
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <Lcd_GoToRowColumn>:

void Lcd_GoToRowColumn(u8 row,u8 column)			// Move cursor to the desired position (row and column)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <Lcd_GoToRowColumn+0x6>
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <Lcd_GoToRowColumn+0x8>
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	3c 83       	std	Y+4, r19	; 0x04
    270e:	2b 83       	std	Y+3, r18	; 0x03
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	31 f0       	breq	.+12     	; 0x2724 <Lcd_GoToRowColumn+0x2e>
    2718:	2b 81       	ldd	r18, Y+3	; 0x03
    271a:	3c 81       	ldd	r19, Y+4	; 0x04
    271c:	21 30       	cpi	r18, 0x01	; 1
    271e:	31 05       	cpc	r19, r1
    2720:	31 f0       	breq	.+12     	; 0x272e <Lcd_GoToRowColumn+0x38>
    2722:	09 c0       	rjmp	.+18     	; 0x2736 <Lcd_GoToRowColumn+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+column);
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	80 58       	subi	r24, 0x80	; 128
    2728:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <Lcd_GoToRowColumn+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	80 54       	subi	r24, 0x40	; 64
    2732:	0e 94 80 0b 	call	0x1700	; 0x1700 <Lcd_Cmd>
		break;
	}
}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <Buzzer_Init>:
 */


#include "Buzzer_Interface.h"
void Buzzer_Init(void)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_CHANNEL,OUTPUT);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	63 e0       	ldi	r22, 0x03	; 3
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 f2 06 	call	0xde4	; 0xde4 <Dio_ConfigChannel>
}
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <Buzzer_TurnON>:
void Buzzer_TurnON(void)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_CHANNEL,STD_HIGH);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	63 e0       	ldi	r22, 0x03	; 3
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
}
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <Buzzer_TurnOFF>:
void Buzzer_TurnOFF(void)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_CHANNEL,STD_LOW);
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	63 e0       	ldi	r22, 0x03	; 3
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Dio_WriteChannel>
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <Buzzer_Toggle>:
void Buzzer_Toggle(void)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(BUZZER_PORT,BUZZER_CHANNEL);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	63 e0       	ldi	r22, 0x03	; 3
    2798:	0e 94 b8 08 	call	0x1170	; 0x1170 <Dio_FlipChannel>
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <main>:
#include "Relay_Interface.h"

volatile u8 data = 8;				// Global variable to receive data from master

int main()
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	6c 97       	sbiw	r28, 0x1c	; 28
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
	Led_Init();					// LED initialization
    27b6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Led_Init>
	Buzzer_Init();				// Buzzer initialization
    27ba:	0e 94 a2 13 	call	0x2744	; 0x2744 <Buzzer_Init>
	Relay_Init();				// Relay initialization
    27be:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Relay_Init>
	Lcd_Init();					// LCD initialization
    27c2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <Lcd_Init>
	Spi_SlaveInit();			// SPI slave initialization
    27c6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Spi_SlaveInit>


	while(1)
	{
		data = Spi_SlaveRead();	//
    27ca:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Spi_SlaveRead>
    27ce:	80 93 84 00 	sts	0x0084, r24
		Lcd_DisplayChr(data);
    27d2:	80 91 84 00 	lds	r24, 0x0084
    27d6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <Lcd_DisplayChr>

		if(data == '1')
    27da:	80 91 84 00 	lds	r24, 0x0084
    27de:	81 33       	cpi	r24, 0x31	; 49
    27e0:	a1 f4       	brne	.+40     	; 0x280a <main+0x68>
		{
			Lcd_Clear();
    27e2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <Lcd_Clear>
			Lcd_GoToRowColumn(0,0);
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <Lcd_GoToRowColumn>
			Buzzer_TurnOFF();
    27ee:	0e 94 ba 13 	call	0x2774	; 0x2774 <Buzzer_TurnOFF>
			Relay_TurnOFF();
    27f2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <Relay_TurnOFF>
			Lcd_DisplayStr("LED1 ON\n");
    27f6:	80 e6       	ldi	r24, 0x60	; 96
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 3e 13 	call	0x267c	; 0x267c <Lcd_DisplayStr>
			Led_Toggle(LED1);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <Led_Toggle>
			data = 0;
    2804:	10 92 84 00 	sts	0x0084, r1
    2808:	e0 cf       	rjmp	.-64     	; 0x27ca <main+0x28>
		}
		else if(data == '2')
    280a:	80 91 84 00 	lds	r24, 0x0084
    280e:	82 33       	cpi	r24, 0x32	; 50
    2810:	09 f0       	breq	.+2      	; 0x2814 <main+0x72>
    2812:	88 c0       	rjmp	.+272    	; 0x2924 <main+0x182>
		{
			Lcd_Clear();
    2814:	0e 94 71 13 	call	0x26e2	; 0x26e2 <Lcd_Clear>
			Lcd_GoToRowColumn(0,0);
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <Lcd_GoToRowColumn>

			Led_OFF(LED1);
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	0e 94 21 0b 	call	0x1642	; 0x1642 <Led_OFF>
			Relay_TurnOFF();
    2826:	0e 94 c3 0a 	call	0x1586	; 0x1586 <Relay_TurnOFF>

			Lcd_DisplayStr("BUZZER ON");
    282a:	89 e6       	ldi	r24, 0x69	; 105
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 3e 13 	call	0x267c	; 0x267c <Lcd_DisplayStr>
			Buzzer_TurnON();
    2832:	0e 94 ae 13 	call	0x275c	; 0x275c <Buzzer_TurnON>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	aa e7       	ldi	r26, 0x7A	; 122
    283c:	b4 e4       	ldi	r27, 0x44	; 68
    283e:	89 8f       	std	Y+25, r24	; 0x19
    2840:	9a 8f       	std	Y+26, r25	; 0x1a
    2842:	ab 8f       	std	Y+27, r26	; 0x1b
    2844:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	69 8d       	ldd	r22, Y+25	; 0x19
    2848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a e7       	ldi	r20, 0x7A	; 122
    2854:	55 e4       	ldi	r21, 0x45	; 69
    2856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8d 8b       	std	Y+21, r24	; 0x15
    2860:	9e 8b       	std	Y+22, r25	; 0x16
    2862:	af 8b       	std	Y+23, r26	; 0x17
    2864:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <main+0xe6>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <main+0x164>
	else if (__tmp > 65535)
    2888:	6d 89       	ldd	r22, Y+21	; 0x15
    288a:	7e 89       	ldd	r23, Y+22	; 0x16
    288c:	8f 89       	ldd	r24, Y+23	; 0x17
    288e:	98 8d       	ldd	r25, Y+24	; 0x18
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	69 8d       	ldd	r22, Y+25	; 0x19
    28a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <main+0x146>
    28ca:	80 e9       	ldi	r24, 0x90	; 144
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	9a 8b       	std	Y+18, r25	; 0x12
    28d0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28d2:	89 89       	ldd	r24, Y+17	; 0x11
    28d4:	9a 89       	ldd	r25, Y+18	; 0x12
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <main+0x134>
    28da:	9a 8b       	std	Y+18, r25	; 0x12
    28dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8b 89       	ldd	r24, Y+19	; 0x13
    28e0:	9c 89       	ldd	r25, Y+20	; 0x14
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9c 8b       	std	Y+20, r25	; 0x14
    28e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <main+0x128>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6d 89       	ldd	r22, Y+21	; 0x15
    28f4:	7e 89       	ldd	r23, Y+22	; 0x16
    28f6:	8f 89       	ldd	r24, Y+23	; 0x17
    28f8:	98 8d       	ldd	r25, Y+24	; 0x18
    28fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	98 8b       	std	Y+16, r25	; 0x10
    290c:	8f 87       	std	Y+15, r24	; 0x0f
    290e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2910:	98 89       	ldd	r25, Y+16	; 0x10
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <main+0x170>
    2916:	98 8b       	std	Y+16, r25	; 0x10
    2918:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Buzzer_TurnOFF();
    291a:	0e 94 ba 13 	call	0x2774	; 0x2774 <Buzzer_TurnOFF>

			data = 0;
    291e:	10 92 84 00 	sts	0x0084, r1
    2922:	53 cf       	rjmp	.-346    	; 0x27ca <main+0x28>
		}
		else if(data == '3')
    2924:	80 91 84 00 	lds	r24, 0x0084
    2928:	83 33       	cpi	r24, 0x33	; 51
    292a:	09 f0       	breq	.+2      	; 0x292e <main+0x18c>
    292c:	4e cf       	rjmp	.-356    	; 0x27ca <main+0x28>
		{
			Lcd_Clear();
    292e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <Lcd_Clear>
			Lcd_GoToRowColumn(0,0);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <Lcd_GoToRowColumn>

			Led_OFF(LED1);
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	0e 94 21 0b 	call	0x1642	; 0x1642 <Led_OFF>
			Buzzer_TurnOFF();
    2940:	0e 94 ba 13 	call	0x2774	; 0x2774 <Buzzer_TurnOFF>

			Lcd_DisplayStr("RELAY ON");
    2944:	83 e7       	ldi	r24, 0x73	; 115
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 3e 13 	call	0x267c	; 0x267c <Lcd_DisplayStr>
			Relay_TurnON();
    294c:	0e 94 b7 0a 	call	0x156e	; 0x156e <Relay_TurnON>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	aa e7       	ldi	r26, 0x7A	; 122
    2956:	b4 e4       	ldi	r27, 0x44	; 68
    2958:	8b 87       	std	Y+11, r24	; 0x0b
    295a:	9c 87       	std	Y+12, r25	; 0x0c
    295c:	ad 87       	std	Y+13, r26	; 0x0d
    295e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a e7       	ldi	r20, 0x7A	; 122
    296e:	55 e4       	ldi	r21, 0x45	; 69
    2970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8f 83       	std	Y+7, r24	; 0x07
    297a:	98 87       	std	Y+8, r25	; 0x08
    297c:	a9 87       	std	Y+9, r26	; 0x09
    297e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <main+0x200>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <main+0x27e>
	else if (__tmp > 65535)
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <main+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <main+0x260>
    29e4:	80 e9       	ldi	r24, 0x90	; 144
    29e6:	91 e0       	ldi	r25, 0x01	; 1
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <main+0x24e>
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <main+0x242>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <main+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x28a>
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Relay_TurnOFF();
    2a34:	0e 94 c3 0a 	call	0x1586	; 0x1586 <Relay_TurnOFF>

			data = 0;
    2a38:	10 92 84 00 	sts	0x0084, r1
    2a3c:	c6 ce       	rjmp	.-628    	; 0x27ca <main+0x28>

00002a3e <__prologue_saves__>:
    2a3e:	2f 92       	push	r2
    2a40:	3f 92       	push	r3
    2a42:	4f 92       	push	r4
    2a44:	5f 92       	push	r5
    2a46:	6f 92       	push	r6
    2a48:	7f 92       	push	r7
    2a4a:	8f 92       	push	r8
    2a4c:	9f 92       	push	r9
    2a4e:	af 92       	push	r10
    2a50:	bf 92       	push	r11
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	ca 1b       	sub	r28, r26
    2a68:	db 0b       	sbc	r29, r27
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	09 94       	ijmp

00002a76 <__epilogue_restores__>:
    2a76:	2a 88       	ldd	r2, Y+18	; 0x12
    2a78:	39 88       	ldd	r3, Y+17	; 0x11
    2a7a:	48 88       	ldd	r4, Y+16	; 0x10
    2a7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a88:	b9 84       	ldd	r11, Y+9	; 0x09
    2a8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a8c:	df 80       	ldd	r13, Y+7	; 0x07
    2a8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a90:	fd 80       	ldd	r15, Y+5	; 0x05
    2a92:	0c 81       	ldd	r16, Y+4	; 0x04
    2a94:	1b 81       	ldd	r17, Y+3	; 0x03
    2a96:	aa 81       	ldd	r26, Y+2	; 0x02
    2a98:	b9 81       	ldd	r27, Y+1	; 0x01
    2a9a:	ce 0f       	add	r28, r30
    2a9c:	d1 1d       	adc	r29, r1
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	ed 01       	movw	r28, r26
    2aaa:	08 95       	ret

00002aac <_exit>:
    2aac:	f8 94       	cli

00002aae <__stop_program>:
    2aae:	ff cf       	rjmp	.-2      	; 0x2aae <__stop_program>
